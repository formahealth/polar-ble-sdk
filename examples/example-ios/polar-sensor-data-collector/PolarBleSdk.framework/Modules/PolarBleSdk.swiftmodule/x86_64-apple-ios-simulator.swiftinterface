// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PolarBleSdk
import Alamofire
import CommonCrypto
import CoreBluetooth
import CryptoKit
import Foundation
import RxSwift
import Swift
import SwiftProtobuf
import UIKit
import Zip
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Protocol_PbPFtpEntry {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var size: Swift.UInt64 {
    get
    set
  }
  public var hasSize: Swift.Bool {
    get
  }
  public mutating func clearSize()
  public var created: PolarBleSdk.PbSystemDateTime {
    get
    set
  }
  public var hasCreated: Swift.Bool {
    get
  }
  public mutating func clearCreated()
  public var modified: PolarBleSdk.PbSystemDateTime {
    get
    set
  }
  public var hasModified: Swift.Bool {
    get
  }
  public mutating func clearModified()
  public var touched: PolarBleSdk.PbSystemDateTime {
    get
    set
  }
  public var hasTouched: Swift.Bool {
    get
  }
  public mutating func clearTouched()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpDirectory {
  public var entries: [PolarBleSdk.Protocol_PbPFtpEntry]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpIdentifyDeviceResult {
  public var deviceID: Swift.String {
    get
    set
  }
  public var hasDeviceID: Swift.Bool {
    get
  }
  public mutating func clearDeviceID()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGetSystemTimeResult {
  public var date: PolarBleSdk.PbDate {
    get
    set
  }
  public var hasDate: Swift.Bool {
    get
  }
  public mutating func clearDate()
  public var time: PolarBleSdk.PbTime {
    get
    set
  }
  public var hasTime: Swift.Bool {
    get
  }
  public mutating func clearTime()
  public var trusted: Swift.Bool {
    get
    set
  }
  public var hasTrusted: Swift.Bool {
    get
  }
  public mutating func clearTrusted()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGetLocalTimeResult {
  public var date: PolarBleSdk.PbDate {
    get
    set
  }
  public var hasDate: Swift.Bool {
    get
  }
  public mutating func clearDate()
  public var time: PolarBleSdk.PbTime {
    get
    set
  }
  public var hasTime: Swift.Bool {
    get
  }
  public mutating func clearTime()
  public var tzOffset: Swift.Int32 {
    get
    set
  }
  public var hasTzOffset: Swift.Bool {
    get
  }
  public mutating func clearTzOffset()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpDiskSpaceResult {
  public var fragmentSize: Swift.UInt32 {
    get
    set
  }
  public var hasFragmentSize: Swift.Bool {
    get
  }
  public mutating func clearFragmentSize()
  public var totalFragments: Swift.UInt64 {
    get
    set
  }
  public var hasTotalFragments: Swift.Bool {
    get
  }
  public mutating func clearTotalFragments()
  public var freeFragments: Swift.UInt64 {
    get
    set
  }
  public var hasFreeFragments: Swift.Bool {
    get
  }
  public mutating func clearFreeFragments()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGenerateChallengeTokenResult {
  public var token: Foundation.Data {
    get
    set
  }
  public var hasToken: Swift.Bool {
    get
  }
  public mutating func clearToken()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGenerateAsymmetricKeysResult {
  public var publicKey: Foundation.Data {
    get
    set
  }
  public var hasPublicKey: Swift.Bool {
    get
  }
  public mutating func clearPublicKey()
  public var asymmetricKeyFormat: PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult.PbAsymmetricKeyFormat {
    get
    set
  }
  public var hasAsymmetricKeyFormat: Swift.Bool {
    get
  }
  public mutating func clearAsymmetricKeyFormat()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbAsymmetricKeyFormat : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case sec256KlCompressed
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult.PbAsymmetricKeyFormat : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult.PbAsymmetricKeyFormat]
  public static var allCases: [PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult.PbAsymmetricKeyFormat] {
    get
  }
}
public struct Protocol_PbPFtpBatteryStatusResult {
  public var batteryStatus: Swift.UInt32 {
    get
    set
  }
  public var hasBatteryStatus: Swift.Bool {
    get
  }
  public mutating func clearBatteryStatus()
  public var charging: Swift.Bool {
    get
    set
  }
  public var hasCharging: Swift.Bool {
    get
  }
  public mutating func clearCharging()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGetInactivityPreAlertResult {
  public var inactivityPreAlertOn: Swift.Bool {
    get
    set
  }
  public var hasInactivityPreAlertOn: Swift.Bool {
    get
  }
  public mutating func clearInactivityPreAlertOn()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbRequestRecordingStatusResult {
  public var recordingOn: Swift.Bool {
    get
    set
  }
  public var hasRecordingOn: Swift.Bool {
    get
  }
  public mutating func clearRecordingOn()
  public var sampleDataIdentifier: Swift.String {
    get
    set
  }
  public var hasSampleDataIdentifier: Swift.Bool {
    get
  }
  public mutating func clearSampleDataIdentifier()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbRequestDisplayStatus {
  public var displayOn: Swift.Bool {
    get
    set
  }
  public var hasDisplayOn: Swift.Bool {
    get
  }
  public mutating func clearDisplayOn()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGetVisualElementsResult {
  public var visualDataPath: Swift.String {
    get
    set
  }
  public var hasVisualDataPath: Swift.Bool {
    get
  }
  public mutating func clearVisualDataPath()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension PolarBleSdk.Protocol_PbPFtpEntry : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpEntry, rhs: PolarBleSdk.Protocol_PbPFtpEntry) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpDirectory : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpDirectory, rhs: PolarBleSdk.Protocol_PbPFtpDirectory) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpIdentifyDeviceResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpIdentifyDeviceResult, rhs: PolarBleSdk.Protocol_PbPFtpIdentifyDeviceResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGetSystemTimeResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGetSystemTimeResult, rhs: PolarBleSdk.Protocol_PbPFtpGetSystemTimeResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGetLocalTimeResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGetLocalTimeResult, rhs: PolarBleSdk.Protocol_PbPFtpGetLocalTimeResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpDiskSpaceResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpDiskSpaceResult, rhs: PolarBleSdk.Protocol_PbPFtpDiskSpaceResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGenerateChallengeTokenResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGenerateChallengeTokenResult, rhs: PolarBleSdk.Protocol_PbPFtpGenerateChallengeTokenResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult, rhs: PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGenerateAsymmetricKeysResult.PbAsymmetricKeyFormat : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPFtpBatteryStatusResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpBatteryStatusResult, rhs: PolarBleSdk.Protocol_PbPFtpBatteryStatusResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGetInactivityPreAlertResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGetInactivityPreAlertResult, rhs: PolarBleSdk.Protocol_PbPFtpGetInactivityPreAlertResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbRequestRecordingStatusResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbRequestRecordingStatusResult, rhs: PolarBleSdk.Protocol_PbRequestRecordingStatusResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbRequestDisplayStatus : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbRequestDisplayStatus, rhs: PolarBleSdk.Protocol_PbRequestDisplayStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGetVisualElementsResult : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGetVisualElementsResult, rhs: PolarBleSdk.Protocol_PbPFtpGetVisualElementsResult) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol CBScanningProtocol {
  func stopScanning()
  func continueScanning()
}
public struct PolarDiskSpaceData {
  public let totalSpace: Swift.UInt64
  public let freeSpace: Swift.UInt64
}
public enum PolarOfflineRecordingData {
  case accOfflineRecordingData(PolarBleSdk.PolarAccData, startTime: Foundation.Date, settings: PolarBleSdk.PolarSensorSetting)
  case gyroOfflineRecordingData(PolarBleSdk.PolarGyroData, startTime: Foundation.Date, settings: PolarBleSdk.PolarSensorSetting)
  case magOfflineRecordingData(PolarBleSdk.PolarMagnetometerData, startTime: Foundation.Date, settings: PolarBleSdk.PolarSensorSetting)
  case ppgOfflineRecordingData(PolarBleSdk.PolarPpgData, startTime: Foundation.Date, settings: PolarBleSdk.PolarSensorSetting)
  case ppiOfflineRecordingData(PolarBleSdk.PolarPpiData, startTime: Foundation.Date)
  case hrOfflineRecordingData(PolarBleSdk.PolarHrData, startTime: Foundation.Date)
  case temperatureOfflineRecordingData(PolarBleSdk.PolarTemperatureData, startTime: Foundation.Date)
}
public enum BlePsFtpException : Swift.Error {
  case undefinedError
  case operationTimeout
  case operationCanceled
  case responseError(errorCode: Swift.Int)
  case protocolError
  public var _domain: Swift.String {
    get
  }
  public var _code: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BlePsFtpUtility {
  public enum MessageType {
    case request, query, notification
    public static func == (a: PolarBleSdk.BlePsFtpUtility.MessageType, b: PolarBleSdk.BlePsFtpUtility.MessageType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let RFC76_STATUS_MORE: Swift.Int
  public static let RFC76_STATUS_LAST: Swift.Int
  public static let RFC76_STATUS_ERROR_OR_RESPONSE: Swift.Int
  public enum RFC76FrameProcessError : Swift.Error {
    case frameIsEmpty
    case frameHasNoPayload
    public static func == (a: PolarBleSdk.BlePsFtpUtility.RFC76FrameProcessError, b: PolarBleSdk.BlePsFtpUtility.RFC76FrameProcessError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let PFTP_AIR_PACKET_LOST_ERROR: Swift.Int
  @_hasMissingDesignatedInitializers public class BlePsFtpRfc76Frame {
    public var next: Swift.Int
    public var status: Swift.Int
    public var sequenceNumber: Swift.Int
    public var error: Swift.Int?
    public var payload: Foundation.Data
    @objc deinit
  }
  public class BlePsFtpRfc76SequenceNumber {
    public init()
    @objc deinit
  }
  public static func makeCompleteMessageStream(_ header: Foundation.Data?, type: PolarBleSdk.BlePsFtpUtility.MessageType, id: Swift.Int) -> Foundation.InputStream
  public static func buildRfc76MessageFrame(_ data: Foundation.InputStream, next: Swift.Int, mtuSize: Swift.Int, sequenceNumber: PolarBleSdk.BlePsFtpUtility.BlePsFtpRfc76SequenceNumber) -> Foundation.Data
  public static func buildRfc76MessageFrame(_ header: Foundation.InputStream, data: Foundation.InputStream?, next: Swift.Int, mtuSize: Swift.Int, sequenceNumber: PolarBleSdk.BlePsFtpUtility.BlePsFtpRfc76SequenceNumber) -> Foundation.Data
  public static func buildRfc76MessageFrameAll(_ data: Foundation.InputStream, mtuSize: Swift.Int, sequenceNumber: PolarBleSdk.BlePsFtpUtility.BlePsFtpRfc76SequenceNumber) -> [Foundation.Data]
  public static func processRfc76MessageFrame(_ packet: Foundation.Data) throws -> PolarBleSdk.BlePsFtpUtility.BlePsFtpRfc76Frame
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BlePsFtpClient : PolarBleSdk.BleGattClientBase {
  public static let PSFTP_SERVICE: CoreBluetooth.CBUUID
  public static let PSFTP_MTU_CHARACTERISTIC: CoreBluetooth.CBUUID
  public static let PSFTP_D2H_NOTIFICATION_CHARACTERISTIC: CoreBluetooth.CBUUID
  public static let PSFTP_H2D_NOTIFICATION_CHARACTERISTIC: CoreBluetooth.CBUUID
  public var PROTOCOL_TIMEOUT: Foundation.TimeInterval
  final public let packetChunks: PolarBleSdk.AtomicType<Swift.Int>
  public init(gattServiceTransmitter: any PolarBleSdk.BleAttributeTransportProtocol)
  @objc deinit
  override public func disconnected()
  override public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  override public func serviceDataWritten(_ chr: CoreBluetooth.CBUUID, err: Swift.Int)
  @_hasMissingDesignatedInitializers public class PsFtpNotification {
    public var id: Swift.Int32
    public var parameters: Foundation.NSMutableData
    public func description() -> Swift.String
    @objc deinit
  }
  public func isBusy() -> Swift.Bool
  public func request(_ header: Foundation.Data) -> RxSwift.Single<Foundation.NSData>
  public func write(_ header: Foundation.NSData, data: Foundation.InputStream) -> RxSwift.Observable<Swift.UInt>
  public func query(_ id: Swift.Int, parameters: Foundation.NSData?) -> RxSwift.Single<Foundation.NSData>
  public func sendNotification(_ id: Swift.Int, parameters: Foundation.NSData?) -> RxSwift.Completable
  public func waitNotification() -> RxSwift.Observable<PolarBleSdk.BlePsFtpClient.PsFtpNotification>
  public func waitPsFtpReady(_ checkConnection: Swift.Bool) -> RxSwift.Completable
  override public func clientReady(_ checkConnection: Swift.Bool) -> RxSwift.Completable
}
@_hasMissingDesignatedInitializers public class AtomicType<T> : ObjectiveC.NSObject {
  public func get() -> T
  public func accessItem(_ f: (_ item: inout T) -> Swift.Void)
  public func set(_ value: T)
  public func wait()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AccData {
  public struct AccSample {
  }
  @objc deinit
}
public enum BlePmdError : Swift.Error {
  case controlPointRequestFailed(errorCode: Swift.Int, description: Swift.String)
  case bleOnlineStreamClosed(description: Swift.String)
}
public struct Pmd {
}
@_hasMissingDesignatedInitializers public class BlePmdClient : PolarBleSdk.BleGattClientBase {
  public static let PMD_SERVICE: CoreBluetooth.CBUUID
  public static let PMD_CP: CoreBluetooth.CBUUID
  public static let PMD_DATA: CoreBluetooth.CBUUID
  public init(gattServiceTransmitter: any PolarBleSdk.BleAttributeTransportProtocol)
  override public func disconnected()
  override public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  public func observeAcc() -> RxSwift.Observable<PolarBleSdk.AccData>
  public func observeGyro() -> RxSwift.Observable<PolarBleSdk.GyrData>
  public func observeMagnetometer() -> RxSwift.Observable<PolarBleSdk.MagData>
  public func observeEcg() -> RxSwift.Observable<(PolarBleSdk.EcgData)>
  public func observePpg() -> RxSwift.Observable<PolarBleSdk.PpgData>
  public func observePpi() -> RxSwift.Observable<PolarBleSdk.PpiData>
  public func startMeasurement(_ type: PolarBleSdk.PmdMeasurementType, settings: PolarBleSdk.PmdSetting, _ recordingType: PolarBleSdk.PmdRecordingType = PmdRecordingType.online, _ secret: PolarBleSdk.PmdSecret? = nil) -> RxSwift.Completable
  public func readFeature(_ checkConnection: Swift.Bool) -> RxSwift.Single<Swift.Set<PolarBleSdk.PmdMeasurementType>>
  override public func clientReady(_ checkConnection: Swift.Bool) -> RxSwift.Completable
  public func startSdkMode() -> RxSwift.Completable
  public func stopSdkMode() -> RxSwift.Completable
  @objc deinit
}
@objc public class CBDeviceListenerImpl : ObjectiveC.NSObject, CoreBluetooth.CBCentralManagerDelegate {
  public var automaticH10Mapping: Swift.Bool
  public var automaticReconnection: Swift.Bool
  public var scanPreFilter: ((_ content: PolarBleSdk.BleAdvertisementContent) -> Swift.Bool)?
  public var servicesToScanFor: [CoreBluetooth.CBUUID]? {
    get
    set
  }
  weak public var deviceSessionStateObserver: (any PolarBleSdk.BleDeviceSessionStateObserver)?
  weak public var powerStateObserver: (any PolarBleSdk.BlePowerStateObserver)? {
    get
    set
  }
  public init(_ queue: Dispatch.DispatchQueue, clients: [(_ transport: any PolarBleSdk.BleAttributeTransportProtocol) -> PolarBleSdk.BleGattClientBase], identifier: Swift.Int)
  @objc public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc deinit
}
extension PolarBleSdk.CBDeviceListenerImpl : PolarBleSdk.CBScanningProtocol {
  public func stopScanning()
  public func continueScanning()
}
extension PolarBleSdk.CBDeviceListenerImpl : PolarBleSdk.BleDeviceListener {
  public func blePowered() -> Swift.Bool
  public func monitorBleState() -> RxSwift.Observable<PolarBleSdk.BleState>
  public func search(_ uuids: [CoreBluetooth.CBUUID]?, identifiers: [Foundation.UUID]?, fetchKnownDevices: Swift.Bool) -> RxSwift.Observable<PolarBleSdk.BleDeviceSession>
  public func openSessionDirect(_ session: PolarBleSdk.BleDeviceSession)
  public func monitorDeviceSessionState() -> RxSwift.Observable<(session: PolarBleSdk.BleDeviceSession, state: PolarBleSdk.BleDeviceSession.DeviceSessionState)>
  public func closeSessionDirect(_ session: PolarBleSdk.BleDeviceSession)
  public func removeAllSessions(_ inState: Swift.Set<PolarBleSdk.BleDeviceSession.DeviceSessionState>) -> Swift.Int
  public func removeAllSessions() -> Swift.Int
  public func allSessions() -> [PolarBleSdk.BleDeviceSession]
}
@_hasMissingDesignatedInitializers public class PpiData {
  @objc deinit
}
public struct OfflineRecordingMetaData {
}
public struct OfflineRecordingHeader {
}
public struct OfflineRecordingData<DataType> {
  public static func parseDataFromOfflineFile(fileData: Foundation.Data, type: PolarBleSdk.PmdMeasurementType, secret: PolarBleSdk.PmdSecret? = nil, lastTimestamp: Swift.UInt64 = 0) throws -> PolarBleSdk.OfflineRecordingData<Any>
}
public enum Protocol_PbPFtpError : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case operationSucceeded
  case rebooting
  case tryAgain
  case unidentifiedHostError
  case invalidCommand
  case invalidParameter
  case noSuchFileOrDirectory
  case directoryExists
  case fileExists
  case operationNotPermitted
  case noSuchUser
  case timeout
  case unidentifiedDeviceError
  case notImplemented
  case systemBusy
  case invalidContent
  case checksumFailure
  case diskFull
  case prerequisiteNotMet
  case insufficientBuffer
  case waitForIdling
  case batteryTooLow
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpError : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPFtpError]
  public static var allCases: [PolarBleSdk.Protocol_PbPFtpError] {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpError : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
public protocol PolarOnlineStreamingApi {
  func getAvailableOnlineStreamDataTypes(_ identifier: Swift.String) -> RxSwift.Single<Swift.Set<PolarBleSdk.PolarDeviceDataType>>
  func requestStreamSettings(_ identifier: Swift.String, feature: PolarBleSdk.PolarDeviceDataType) -> RxSwift.Single<PolarBleSdk.PolarSensorSetting>
  func requestFullStreamSettings(_ identifier: Swift.String, feature: PolarBleSdk.PolarDeviceDataType) -> RxSwift.Single<PolarBleSdk.PolarSensorSetting>
  func startHrStreaming(_ identifier: Swift.String) -> RxSwift.Observable<PolarBleSdk.PolarHrData>
  func startEcgStreaming(_ identifier: Swift.String, settings: PolarBleSdk.PolarSensorSetting) -> RxSwift.Observable<PolarBleSdk.PolarEcgData>
  func startAccStreaming(_ identifier: Swift.String, settings: PolarBleSdk.PolarSensorSetting) -> RxSwift.Observable<PolarBleSdk.PolarAccData>
  func startGyroStreaming(_ identifier: Swift.String, settings: PolarBleSdk.PolarSensorSetting) -> RxSwift.Observable<PolarBleSdk.PolarGyroData>
  func startMagnetometerStreaming(_ identifier: Swift.String, settings: PolarBleSdk.PolarSensorSetting) -> RxSwift.Observable<PolarBleSdk.PolarMagnetometerData>
  @available(*, deprecated, renamed: "startPpgStreaming")
  func startOhrStreaming(_ identifier: Swift.String, settings: PolarBleSdk.PolarSensorSetting) -> RxSwift.Observable<PolarBleSdk.PolarOhrData>
  func startPpgStreaming(_ identifier: Swift.String, settings: PolarBleSdk.PolarSensorSetting) -> RxSwift.Observable<PolarBleSdk.PolarPpgData>
  func startPpiStreaming(_ identifier: Swift.String) -> RxSwift.Observable<PolarBleSdk.PolarPpiData>
  @available(*, deprecated, renamed: "startPpiStreaming")
  func startOhrPPIStreaming(_ identifier: Swift.String) -> RxSwift.Observable<PolarBleSdk.PolarPpiData>
}
public enum OfflineRecordingError : Swift.Error {
  case emptyFile
  case offlineRecordingErrorMetaDataParseFailed(description: Swift.String = "")
  case offlineRecordingErrorSecretMissing
  case offlineRecordingSecurityStrategyMissMatch(description: Swift.String = "")
  case offlineRecordingHasWrongSignature
  case offlineRecordingNoPayloadData
  case offlineRecordingErrorNoParserForData
}
@_hasMissingDesignatedInitializers public class PpgData {
  @objc deinit
}
public enum PolarDeviceDataType : Swift.CaseIterable {
  case ecg
  case acc
  case ppg
  case ppi
  case gyro
  case magnetometer
  case hr
  case temperature
  public static func == (a: PolarBleSdk.PolarDeviceDataType, b: PolarBleSdk.PolarDeviceDataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PolarBleSdk.PolarDeviceDataType]
  public static var allCases: [PolarBleSdk.PolarDeviceDataType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum PolarBleSdkFeature : Swift.CaseIterable {
  case feature_hr
  case feature_device_info
  case feature_battery_info
  case feature_polar_online_streaming
  case feature_polar_offline_recording
  case feature_polar_h10_exercise_recording
  case feature_polar_device_time_setup
  case feature_polar_sdk_mode
  case feature_polar_led_animation
  case feature_polar_firmware_update
  public static func == (a: PolarBleSdk.PolarBleSdkFeature, b: PolarBleSdk.PolarBleSdkFeature) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [PolarBleSdk.PolarBleSdkFeature]
  public static var allCases: [PolarBleSdk.PolarBleSdkFeature] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public typealias PolarDeviceInfo = (deviceId: Swift.String, address: Foundation.UUID, rssi: Swift.Int, name: Swift.String, connectable: Swift.Bool)
public typealias PolarHrBroadcastData = (deviceInfo: PolarBleSdk.PolarDeviceInfo, hr: Swift.UInt8, batteryStatus: Swift.Bool)
public typealias PolarHrData = [(hr: Swift.UInt8, rrsMs: [Swift.Int], rrAvailable: Swift.Bool, contactStatus: Swift.Bool, contactStatusSupported: Swift.Bool)]
public typealias PolarEcgData = (timeStamp: Swift.UInt64, samples: [(timeStamp: Swift.UInt64, voltage: Swift.Int32)])
public typealias PolarAccData = (timeStamp: Swift.UInt64, samples: [(timeStamp: Swift.UInt64, x: Swift.Int32, y: Swift.Int32, z: Swift.Int32)])
public typealias PolarGyroData = (timeStamp: Swift.UInt64, samples: [(timeStamp: Swift.UInt64, x: Swift.Float, y: Swift.Float, z: Swift.Float)])
public typealias PolarMagnetometerData = (timeStamp: Swift.UInt64, samples: [(timeStamp: Swift.UInt64, x: Swift.Float, y: Swift.Float, z: Swift.Float)])
public typealias PolarTemperatureData = (timeStamp: Swift.UInt64, samples: [(timeStamp: Swift.UInt64, temperature: Swift.Float)])
@available(*, deprecated, renamed: "PpgDataType")
public enum OhrDataType : Swift.Int, Swift.CaseIterable {
  case ppg3_ambient1
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PolarBleSdk.OhrDataType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PolarBleSdk.OhrDataType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, renamed: "PolarPpgData")
public typealias PolarOhrData = (timeStamp: Swift.UInt64, type: PolarBleSdk.OhrDataType, samples: [(timeStamp: Swift.UInt64, channelSamples: [Swift.Int32])])
public enum PpgDataType : Swift.Int, Swift.CaseIterable {
  case ppg3_ambient1
  case ppg17
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PolarBleSdk.PpgDataType]
  public typealias RawValue = Swift.Int
  public static var allCases: [PolarBleSdk.PpgDataType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public typealias PolarPpgData = (type: PolarBleSdk.PpgDataType, samples: [(timeStamp: Swift.UInt64, channelSamples: [Swift.Int32])])
public typealias PolarPpiData = (timeStamp: Swift.UInt64, samples: [(hr: Swift.Int, ppInMs: Swift.UInt16, ppErrorEstimate: Swift.UInt16, blockerBit: Swift.Int, skinContactStatus: Swift.Int, skinContactSupported: Swift.Int)])
public typealias PolarExerciseEntry = (path: Swift.String, date: Foundation.Date, entryId: Swift.String)
public typealias PolarExerciseData = (interval: Swift.UInt32, samples: [Swift.UInt32])
public typealias PolarRecordingStatus = (ongoing: Swift.Bool, entryId: Swift.String)
public protocol PolarBleApi : PolarBleSdk.PolarFirmwareUpdateApi, PolarBleSdk.PolarH10OfflineExerciseApi, PolarBleSdk.PolarOfflineRecordingApi, PolarBleSdk.PolarOnlineStreamingApi, PolarBleSdk.PolarSdkModeApi {
  func cleanup()
  func polarFilter(_ enable: Swift.Bool)
  func startAutoConnectToDevice(_ rssi: Swift.Int, service: CoreBluetooth.CBUUID?, polarDeviceType: Swift.String?) -> RxSwift.Completable
  func connectToDevice(_ identifier: Swift.String) throws
  func disconnectFromDevice(_ identifier: Swift.String) throws
  func searchForDevice() -> RxSwift.Observable<PolarBleSdk.PolarDeviceInfo>
  func startListenForPolarHrBroadcasts(_ identifiers: Swift.Set<Swift.String>?) -> RxSwift.Observable<PolarBleSdk.PolarHrBroadcastData>
  func isFeatureReady(_ identifier: Swift.String, feature: PolarBleSdk.PolarBleSdkFeature) -> Swift.Bool
  func setLocalTime(_ identifier: Swift.String, time: Foundation.Date, zone: Foundation.TimeZone) -> RxSwift.Completable
  func getLocalTime(_ identifier: Swift.String) -> RxSwift.Single<Foundation.Date>
  func getDiskSpace(_ identifier: Swift.String) -> RxSwift.Single<PolarBleSdk.PolarDiskSpaceData>
  func setLedConfig(_ identifier: Swift.String, ledConfig: PolarBleSdk.LedConfig) -> RxSwift.Completable
  func doFactoryReset(_ identifier: Swift.String, preservePairingInformation: Swift.Bool) -> RxSwift.Completable
  var observer: (any PolarBleSdk.PolarBleApiObserver)? { get set }
  var deviceInfoObserver: (any PolarBleSdk.PolarBleApiDeviceInfoObserver)? { get set }
  @available(*, deprecated, message: "The functionality has changed. Please use the startHrStreaming API to get the heart rate data ")
  var deviceHrObserver: (any PolarBleSdk.PolarBleApiDeviceHrObserver)? { get set }
  var powerStateObserver: (any PolarBleSdk.PolarBleApiPowerStateObserver)? { get set }
  var deviceFeaturesObserver: (any PolarBleSdk.PolarBleApiDeviceFeaturesObserver)? { get set }
  @available(*, deprecated, message: "The functionality has changed. Please use the bleSdkFeatureReady to know if sdkModeFeature is available")
  var sdkModeFeatureObserver: (any PolarBleSdk.PolarBleApiSdkModeFeatureObserver)? { get set }
  var isBlePowered: Swift.Bool { get }
  var logger: (any PolarBleSdk.PolarBleApiLogger)? { get set }
  var automaticReconnection: Swift.Bool { get set }
}
@objc open class BleDeviceSession : ObjectiveC.NSObject {
  public enum DeviceSessionState {
    case sessionClosed, sessionOpening, sessionOpenPark, sessionOpen, sessionClosing
    public func description() -> Swift.String
    public static func == (a: PolarBleSdk.BleDeviceSession.DeviceSessionState, b: PolarBleSdk.BleDeviceSession.DeviceSessionState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ConnectionType {
    case directConnection
    case connectFromAdvertisementHead
    public static func == (a: PolarBleSdk.BleDeviceSession.ConnectionType, b: PolarBleSdk.BleDeviceSession.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let address: Foundation.UUID
  final public let advertisementContent: PolarBleSdk.BleAdvertisementContent
  public var state: PolarBleSdk.BleDeviceSession.DeviceSessionState
  public var previousState: PolarBleSdk.BleDeviceSession.DeviceSessionState
  public var connectionType: PolarBleSdk.BleDeviceSession.ConnectionType
  public init(_ addr: Foundation.UUID)
  public func fetchGattClient(_ serviceUuid: CoreBluetooth.CBUUID) -> PolarBleSdk.BleGattClientBase?
  public func isConnectable() -> Swift.Bool
  public func monitorServicesDiscovered(_ checkConnection: Swift.Bool) -> RxSwift.Observable<CoreBluetooth.CBUUID>
  public func clientsReady() -> RxSwift.Observable<Swift.Never>
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BlePolarDeviceIdUtility {
  public static func isValidDeviceId(_ deviceId: Swift.String) -> Swift.Bool
  public static func checkSumForDeviceId(_ deviceId: Swift.UInt32, width: Swift.Int) -> Swift.UInt8
  public static func assemblyFullPolarDeviceId(_ deviceId: Swift.UInt32, width: Swift.Int) -> Swift.String
  public static func polarDeviceIdToInt(_ deviceId: Swift.String) -> Swift.UInt32
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PolarBleApiDefaultImpl {
  public static func polarImplementation(_ queue: Dispatch.DispatchQueue, features: Swift.Set<PolarBleSdk.PolarBleSdkFeature>) -> any PolarBleSdk.PolarBleApi
  public static func versionInfo() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers open class BlePolarDeviceCapabilitiesUtility {
  public enum FileSystemType {
    case unknownFileSystem
    case h10FileSystem
    case sagRfc2FileSystem
    public static func == (a: PolarBleSdk.BlePolarDeviceCapabilitiesUtility.FileSystemType, b: PolarBleSdk.BlePolarDeviceCapabilitiesUtility.FileSystemType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static let H10: Swift.String
  public static let OH1: Swift.String
  public static let SENSE: Swift.String
  public static let INW5T: Swift.String
  public static let HONDA: Swift.String
  public static func fileSystemType(_ deviceType: Swift.String) -> PolarBleSdk.BlePolarDeviceCapabilitiesUtility.FileSystemType
  public static func isRecordingSupported(_ deviceType: Swift.String) -> Swift.Bool
  public static func isFirmwareUpdateSupported(_ deviceType: Swift.String) -> Swift.Bool
  @objc deinit
}
public struct Data_PbPowerMeasurements {
  public var currentPower: Swift.Int32 {
    get
    set
  }
  public var hasCurrentPower: Swift.Bool {
    get
  }
  public mutating func clearCurrentPower()
  public var cumulativeCrankRevolutions: Swift.UInt32 {
    get
    set
  }
  public var hasCumulativeCrankRevolutions: Swift.Bool {
    get
  }
  public mutating func clearCumulativeCrankRevolutions()
  public var cumulativeTimestamp: Swift.UInt32 {
    get
    set
  }
  public var hasCumulativeTimestamp: Swift.Bool {
    get
  }
  public mutating func clearCumulativeTimestamp()
  public var forceMagnitudeMin: Swift.Int32 {
    get
    set
  }
  public var hasForceMagnitudeMin: Swift.Bool {
    get
  }
  public mutating func clearForceMagnitudeMin()
  public var forceMagnitudeMax: Swift.Int32 {
    get
    set
  }
  public var hasForceMagnitudeMax: Swift.Bool {
    get
  }
  public mutating func clearForceMagnitudeMax()
  public var forceMagnitudeMinAngle: Swift.UInt32 {
    get
    set
  }
  public var hasForceMagnitudeMinAngle: Swift.Bool {
    get
  }
  public mutating func clearForceMagnitudeMinAngle()
  public var forceMagnitudeMaxAngle: Swift.UInt32 {
    get
    set
  }
  public var hasForceMagnitudeMaxAngle: Swift.Bool {
    get
  }
  public mutating func clearForceMagnitudeMaxAngle()
  public var bottomDeadSpotAngle: Swift.UInt32 {
    get
    set
  }
  public var hasBottomDeadSpotAngle: Swift.Bool {
    get
  }
  public mutating func clearBottomDeadSpotAngle()
  public var topDeadSpotAngle: Swift.UInt32 {
    get
    set
  }
  public var hasTopDeadSpotAngle: Swift.Bool {
    get
  }
  public mutating func clearTopDeadSpotAngle()
  public var pedalPowerBalance: Swift.UInt32 {
    get
    set
  }
  public var hasPedalPowerBalance: Swift.Bool {
    get
  }
  public mutating func clearPedalPowerBalance()
  public var torqueMagnitudeMin: Swift.Int32 {
    get
    set
  }
  public var hasTorqueMagnitudeMin: Swift.Bool {
    get
  }
  public mutating func clearTorqueMagnitudeMin()
  public var torqueMagnitudeMax: Swift.Int32 {
    get
    set
  }
  public var hasTorqueMagnitudeMax: Swift.Bool {
    get
  }
  public mutating func clearTorqueMagnitudeMax()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Data_PbCalibrationValue {
  public var startIndex: Swift.UInt32 {
    get
    set
  }
  public var hasStartIndex: Swift.Bool {
    get
  }
  public mutating func clearStartIndex()
  public var value: Swift.Float {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var operation: PolarBleSdk.PbOperationType {
    get
    set
  }
  public var hasOperation: Swift.Bool {
    get
  }
  public mutating func clearOperation()
  public var cause: PolarBleSdk.PbMovingType {
    get
    set
  }
  public var hasCause: Swift.Bool {
    get
  }
  public mutating func clearCause()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Data_PbExerciseIntervalledSampleList {
  public var sampleType: PolarBleSdk.PbSampleType {
    get
    set
  }
  public var hasSampleType: Swift.Bool {
    get
  }
  public mutating func clearSampleType()
  public var recordingIntervalMs: Swift.UInt32 {
    get
    set
  }
  public var hasRecordingIntervalMs: Swift.Bool {
    get
  }
  public mutating func clearRecordingIntervalMs()
  public var sampleSource: [PolarBleSdk.PbSampleSource] {
    get
    set
  }
  public var heartRateSamples: [Swift.UInt32] {
    get
    set
  }
  public var cadenceSamples: [Swift.UInt32] {
    get
    set
  }
  public var speedSamples: [Swift.Float] {
    get
    set
  }
  public var distanceSamples: [Swift.Float] {
    get
    set
  }
  public var forwardAcceleration: [Swift.Float] {
    get
    set
  }
  public var movingTypeSamples: [PolarBleSdk.PbMovingType] {
    get
    set
  }
  public var altitudeSamples: [Swift.Float] {
    get
    set
  }
  public var altitudeCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var temperatureSamples: [Swift.Float] {
    get
    set
  }
  public var strideLengthSamples: [Swift.UInt32] {
    get
    set
  }
  public var strideCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var leftPedalPowerSamples: [PolarBleSdk.Data_PbPowerMeasurements] {
    get
    set
  }
  public var rightPedalPowerSamples: [PolarBleSdk.Data_PbPowerMeasurements] {
    get
    set
  }
  public var leftPowerCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var rightPowerCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var rrSamples: PolarBleSdk.Data_PbExerciseRRIntervals {
    get
    set
  }
  public var hasRrSamples: Swift.Bool {
    get
  }
  public mutating func clearRrSamples()
  public var accelerationMadSamples: [Swift.Float] {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Data_PbExerciseSamples {
  public var recordingInterval: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasRecordingInterval: Swift.Bool {
    get
  }
  public mutating func clearRecordingInterval()
  public var heartRateSamples: [Swift.UInt32] {
    get
    set
  }
  public var heartRateOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var cadenceSamples: [Swift.UInt32] {
    get
    set
  }
  public var cadenceOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var altitudeSamples: [Swift.Float] {
    get
    set
  }
  public var altitudeOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var altitudeCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var temperatureSamples: [Swift.Float] {
    get
    set
  }
  public var temperatureOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var speedSamples: [Swift.Float] {
    get
    set
  }
  public var speedOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var distanceSamples: [Swift.Float] {
    get
    set
  }
  public var distanceOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var strideLengthSamples: [Swift.UInt32] {
    get
    set
  }
  public var strideLengthOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var strideCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var forwardAcceleration: [Swift.Float] {
    get
    set
  }
  public var forwardAccelerationOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var movingTypeSamples: [PolarBleSdk.PbMovingType] {
    get
    set
  }
  public var movingTypeOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var leftPedalPowerSamples: [PolarBleSdk.Data_PbPowerMeasurements] {
    get
    set
  }
  public var leftPedalPowerOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var rightPedalPowerSamples: [PolarBleSdk.Data_PbPowerMeasurements] {
    get
    set
  }
  public var rightPedalPowerOffline: [PolarBleSdk.PbSensorOffline] {
    get
    set
  }
  public var leftPowerCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var rightPowerCalibration: [PolarBleSdk.Data_PbCalibrationValue] {
    get
    set
  }
  public var rrSamples: PolarBleSdk.Data_PbExerciseRRIntervals {
    get
    set
  }
  public var hasRrSamples: Swift.Bool {
    get
  }
  public mutating func clearRrSamples()
  public var exerciseIntervalledSampleList: [PolarBleSdk.Data_PbExerciseIntervalledSampleList] {
    get
    set
  }
  public var pauseTimes: [PolarBleSdk.PbPauseTime] {
    get
    set
  }
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension PolarBleSdk.Data_PbPowerMeasurements : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Data_PbPowerMeasurements, rhs: PolarBleSdk.Data_PbPowerMeasurements) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Data_PbCalibrationValue : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Data_PbCalibrationValue, rhs: PolarBleSdk.Data_PbCalibrationValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Data_PbExerciseIntervalledSampleList : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Data_PbExerciseIntervalledSampleList, rhs: PolarBleSdk.Data_PbExerciseIntervalledSampleList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Data_PbExerciseSamples : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Data_PbExerciseSamples, rhs: PolarBleSdk.Data_PbExerciseSamples) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class GyrData {
  @objc deinit
}
public struct PmdSecret {
}
public struct LedConfig {
  public init(sdkModeLedEnabled: Swift.Bool, ppiModeLedEnabled: Swift.Bool)
}
public protocol PolarBleApiObserver : AnyObject {
  func deviceConnecting(_ identifier: PolarBleSdk.PolarDeviceInfo)
  func deviceConnected(_ identifier: PolarBleSdk.PolarDeviceInfo)
  func deviceDisconnected(_ identifier: PolarBleSdk.PolarDeviceInfo, pairingError: Swift.Bool)
}
public protocol PolarBleApiPowerStateObserver : AnyObject {
  func blePowerOn()
  func blePowerOff()
}
public protocol PolarBleApiDeviceInfoObserver : AnyObject {
  func batteryLevelReceived(_ identifier: Swift.String, batteryLevel: Swift.UInt)
  func disInformationReceived(_ identifier: Swift.String, uuid: CoreBluetooth.CBUUID, value: Swift.String)
  func disInformationReceivedWithKeysAsStrings(_ identifier: Swift.String, key: Swift.String, value: Swift.String)
}
public protocol PolarBleApiDeviceHrObserver : AnyObject {
  @available(*, deprecated, message: "The functionality has changed. Please use the startHrStreaming API to get the heart rate data ")
  func hrValueReceived(_ identifier: Swift.String, data: (hr: Swift.UInt8, rrs: [Swift.Int], rrsMs: [Swift.Int], contact: Swift.Bool, contactSupported: Swift.Bool))
}
public protocol PolarBleApiDeviceFeaturesObserver : AnyObject {
  @available(*, deprecated, message: "Please use the startHrStreaming API to get the heart rate data")
  func hrFeatureReady(_ identifier: Swift.String)
  @available(*, deprecated, message: "Not supported anymore, won't be ever called. Use the bleSdkFeatureReady")
  func ftpFeatureReady(_ identifier: Swift.String)
  @available(*, deprecated, message: "The functionality has changed. Please listen the bleSdkFeatureReady callback to know if onlineStreaming is available and the getAvailableOnlineStreamDataTypes function know which data types are supported")
  func streamingFeaturesReady(_ identifier: Swift.String, streamingFeatures: Swift.Set<PolarBleSdk.PolarDeviceDataType>)
  func bleSdkFeatureReady(_ identifier: Swift.String, feature: PolarBleSdk.PolarBleSdkFeature)
}
public protocol PolarBleApiSdkModeFeatureObserver : AnyObject {
  @available(*, deprecated, message: "The functionality has changed. Please use the bleSdkFeatureReady to know if sdkModeFeature is available")
  func sdkModeFeatureAvailable(_ identifier: Swift.String)
}
public protocol PolarBleApiLogger : AnyObject {
  func message(_ str: Swift.String)
}
@_hasMissingDesignatedInitializers public class MagData {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EcgData {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BleAdvertisementContent {
  public var polarHrAdvertisementData: PolarBleSdk.BlePolarHrAdvertisement {
    get
  }
  public var rssiFilter: PolarBleSdk.BleRssiFilter {
    get
  }
  public var advertisementTimestamp: Swift.Double {
    get
  }
  public var advertisementDelta: Swift.Double {
    get
  }
  public var polarDeviceIdInt: Swift.UInt32 {
    get
  }
  public var polarDeviceIdIntUntouched: Swift.UInt32 {
    get
  }
  public var isConnectable: Swift.Bool {
    get
  }
  public var medianRssi: Swift.Int32 {
    get
  }
  public var advData: [Swift.String : Any] {
    get
  }
  public var name: Swift.String {
    get
  }
  public var polarDeviceId: Swift.String {
    get
  }
  public var polarDeviceIdUntouched: Swift.String {
    get
  }
  public var polarDeviceType: Swift.String {
    get
  }
  public func containsService(_ service: CoreBluetooth.CBUUID) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OfflineHrData {
  @objc deinit
}
extension RxSwift.PrimitiveSequence where Trait == RxSwift.SingleTrait {
  public func asCompletable() -> RxSwift.PrimitiveSequence<RxSwift.CompletableTrait, Swift.Never>
}
@_hasMissingDesignatedInitializers open class PolarAdvDataUtility {
  public static func getPolarModelNameFromAdvLocalName(advLocalName: Swift.String) -> Swift.String
  public static func isPolarDevice(advLocalName: Swift.String) -> Swift.Bool
  @objc deinit
}
public enum PmdOfflineRecTriggerMode : Swift.UInt8, Swift.CaseIterable {
  case disabled
  case systemStart
  case exerciseStart
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [PolarBleSdk.PmdOfflineRecTriggerMode]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [PolarBleSdk.PmdOfflineRecTriggerMode] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum PmdOfflineRecTriggerStatus : Swift.UInt8, Swift.CaseIterable {
  case disabled
  case enabled
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [PolarBleSdk.PmdOfflineRecTriggerStatus]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [PolarBleSdk.PmdOfflineRecTriggerStatus] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct PmdOfflineTrigger {
}
@_hasMissingDesignatedInitializers public class BlePolarHrAdvertisement {
  public var batteryStatus: Swift.Bool {
    get
  }
  public var sensorContact: Swift.Bool {
    get
  }
  public var advFrameCounter: Swift.UInt8 {
    get
  }
  public var broadcastBit: Swift.UInt8 {
    get
  }
  public var sensorDataType: Swift.UInt8 {
    get
  }
  public var statusFlags: Swift.UInt8 {
    get
  }
  public var khzCode: Swift.UInt8 {
    get
  }
  public var fastAverageHr: Swift.UInt8 {
    get
  }
  public var slowAverageHr: Swift.UInt8 {
    get
  }
  public var isHrDataUpdated: Swift.Bool {
    get
  }
  public var isPresent: Swift.Bool {
    get
  }
  public var hrValueForDisplay: Swift.UInt8 {
    get
  }
  public func processPolarManufacturerData(_ data: Foundation.Data)
  public func resetToDefault()
  public func description() -> Swift.String
  @objc deinit
}
public struct NanoPBOptions {
  public var maxSize: Swift.Int32 {
    get
    set
  }
  public var hasMaxSize: Swift.Bool {
    get
  }
  public mutating func clearMaxSize()
  public var maxCount: Swift.Int32 {
    get
    set
  }
  public var hasMaxCount: Swift.Bool {
    get
  }
  public mutating func clearMaxCount()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension SwiftProtobuf.Google_Protobuf_FieldOptions {
  public var nanopb: PolarBleSdk.NanoPBOptions {
    get
    set
  }
  public var hasNanopb: Swift.Bool {
    get
  }
  public mutating func clearNanopb()
}
public let Nanopb_Extensions: SwiftProtobuf.SimpleExtensionMap
public let Extensions_nanopb: SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<PolarBleSdk.NanoPBOptions>, SwiftProtobuf.Google_Protobuf_FieldOptions>
extension PolarBleSdk.NanoPBOptions : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.NanoPBOptions, rhs: PolarBleSdk.NanoPBOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BleRssiFilter {
  public var rssi: (Swift.Int32) {
    get
  }
  public var medianRssi: (Swift.Int32) {
    get
  }
  @objc deinit
}
public enum BleGattException : Swift.Error {
  case gattDisconnected
  case gattServiceNotFound
  case gattServicesNotFound
  case gattCharacteristicNotFound
  case gattCharacteristicNotifyNotEnabled
  case gattCharacteristicNotifyNotDisabled
  case gattCharacteristicNotifyError(errorCode: Swift.Int, errorDescription: Swift.String = "")
  case gattCharacteristicError
  case gattUndefinedDeviceError
  case gattAttributeError(errorCode: Swift.Int, errorDescription: Swift.String = "")
  case gattOperationNotSupported
  case gattTransportNotAvailable
  case gattOperationModeChange(description: Swift.String = "")
  case gattDataError(description: Swift.String = "")
  case gattSecurityError(description: Swift.String = "")
}
@_hasMissingDesignatedInitializers public class BleBasClient : PolarBleSdk.BleGattClientBase {
  public static let BATTERY_SERVICE: CoreBluetooth.CBUUID
  public init(gattServiceTransmitter: any PolarBleSdk.BleAttributeTransportProtocol)
  override public func disconnected()
  override public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  public func readLevel() throws
  public func monitorBatteryStatus(_ checkConnection: Swift.Bool) -> RxSwift.Observable<Swift.Int>
  @objc deinit
}
public enum RecordingInterval : Swift.Int {
  case interval_1s
  case interval_5s
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SampleType : Swift.Int {
  case hr
  case rr
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol PolarH10OfflineExerciseApi {
  func startRecording(_ identifier: Swift.String, exerciseId: Swift.String, interval: PolarBleSdk.RecordingInterval, sampleType: PolarBleSdk.SampleType) -> RxSwift.Completable
  func stopRecording(_ identifier: Swift.String) -> RxSwift.Completable
  func requestRecordingStatus(_ identifier: Swift.String) -> RxSwift.Single<PolarBleSdk.PolarRecordingStatus>
  func fetchStoredExerciseList(_ identifier: Swift.String) -> RxSwift.Observable<PolarBleSdk.PolarExerciseEntry>
  func fetchExercise(_ identifier: Swift.String, entry: PolarBleSdk.PolarExerciseEntry) -> RxSwift.Single<PolarBleSdk.PolarExerciseData>
  func removeExercise(_ identifier: Swift.String, entry: PolarBleSdk.PolarExerciseEntry) -> RxSwift.Completable
}
public struct PmdSetting {
  public enum PmdSettingType : Swift.UInt8, Swift.CaseIterable {
    case sampleRate
    case resolution
    case range
    case rangeMilliUnit
    case channels
    case factor
    case security
    case unknown
    public init?(rawValue: Swift.UInt8)
    public typealias AllCases = [PolarBleSdk.PmdSetting.PmdSettingType]
    public typealias RawValue = Swift.UInt8
    public static var allCases: [PolarBleSdk.PmdSetting.PmdSettingType] {
      get
    }
    public var rawValue: Swift.UInt8 {
      get
    }
  }
  public var settings: [PolarBleSdk.PmdSetting.PmdSettingType : Swift.Set<Swift.UInt32>]
  public var selected: [PolarBleSdk.PmdSetting.PmdSettingType : Swift.UInt32]
  public init(_ selected: [PolarBleSdk.PmdSetting.PmdSettingType : Swift.UInt32])
  public init(_ data: Foundation.Data)
  public func serialize() -> Foundation.Data
}
public enum PmdResponseCode : Swift.Int {
  case success
  case errorInvalidOpCode
  case errorInvalidMeasurementType
  case errorNotSupported
  case errorInvalidLength
  case errorInvalidParameter
  case errorAlreadyInState
  case errorInvalidResolution
  case errorInvalidSampleRate
  case errorInvalidRange
  case errorInvalidMTU
  case errorInvalidNumberOfChannels
  case errorInvalidState
  case errorDeviceInCharger
  case errorDiskFull
  case unknown_error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PmdMeasurementType : Swift.UInt8, Swift.CaseIterable {
  case ecg
  case ppg
  case acc
  case ppi
  case gyro
  case mgn
  case sdkMode
  case location
  case pressure
  case temperature
  case offline_recording
  case offline_hr
  case unknown_type
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [PolarBleSdk.PmdMeasurementType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [PolarBleSdk.PmdMeasurementType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers public class BleDisClient : PolarBleSdk.BleGattClientBase {
  public static let DIS_SERVICE: CoreBluetooth.CBUUID
  public static let MODEL_NUMBER_STRING: CoreBluetooth.CBUUID
  public static let MANUFACTURER_NAME_STRING: CoreBluetooth.CBUUID
  public static let HARDWARE_REVISION_STRING: CoreBluetooth.CBUUID
  public static let FIRMWARE_REVISION_STRING: CoreBluetooth.CBUUID
  public static let SOFTWARE_REVISION_STRING: CoreBluetooth.CBUUID
  public static let SERIAL_NUMBER_STRING: CoreBluetooth.CBUUID
  public static let SYSTEM_ID: CoreBluetooth.CBUUID
  public static let IEEE_11073_20601: CoreBluetooth.CBUUID
  public static let PNP_ID: CoreBluetooth.CBUUID
  public static let SYSTEM_ID_HEX: Swift.String
  public init(gattServiceTransmitter: any PolarBleSdk.BleAttributeTransportProtocol)
  override public func disconnected()
  override public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  public func readDisInfo(_ checkConnection: Swift.Bool) -> RxSwift.Observable<(CoreBluetooth.CBUUID, Swift.String)>
  public func readDisInfoWithKeysAsStrings(_ checkConnection: Swift.Bool) -> RxSwift.Observable<(Swift.String, Swift.String)>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BleHrClient : PolarBleSdk.BleGattClientBase {
  public static let HR_SERVICE: CoreBluetooth.CBUUID
  public typealias BleHrNotification = (hr: Swift.Int, sensorContact: Swift.Bool, sensorContactSupported: Swift.Bool, energy: Swift.Int, rrs: [Swift.Int], rrsMs: [Swift.Int], rrPresent: Swift.Bool)
  public init(gattServiceTransmitter: any PolarBleSdk.BleAttributeTransportProtocol)
  override public func disconnected()
  override public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  public func observeHrNotifications(_ checkConnection: Swift.Bool) -> RxSwift.Observable<PolarBleSdk.BleHrClient.BleHrNotification>
  @objc deinit
}
public enum PmdActiveMeasurement : Swift.UInt8 {
  case no_measurement_active
  case online_measurement_active
  case offline_measurement_active
  case online_offline_measurement_active
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct Psd {
  @_hasMissingDesignatedInitializers public class PPData {
    final public let rc: Swift.Int
    final public let hr: Swift.Int
    public var ppInMs: Swift.UInt16
    public var ppErrorEstimate: Swift.UInt16
    final public let blockerBit: Swift.Int
    final public let skinContactStatus: Swift.Int
    final public let skinContactSupported: Swift.Int
    @objc deinit
  }
  public class PsdResponse {
    final public let responseCode: Swift.UInt8
    final public let opCode: Swift.UInt8
    final public let status: Swift.UInt8
    public init(_ data: Foundation.Data)
    @objc deinit
  }
  public class PsdFeature {
    final public let ecgSupported: Swift.Bool
    final public let accSupported: Swift.Bool
    final public let ohrSupported: Swift.Bool
    final public let ppSupported: Swift.Bool
    public init(_ data: Foundation.Data)
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers public class BlePsdClient : PolarBleSdk.BleGattClientBase {
  public enum PsdMessage : Swift.Int {
    case psdUnknown
    case psdStartOhrPpStream
    case psdStopOhrPpStream
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static let PSD_SERVICE: CoreBluetooth.CBUUID
  public static let PSD_FEATURE: CoreBluetooth.CBUUID
  public static let PSD_PP: CoreBluetooth.CBUUID
  public static let PSD_CP: CoreBluetooth.CBUUID
  public static let PSD_OHR: CoreBluetooth.CBUUID
  public static let PSD_ECG: CoreBluetooth.CBUUID
  public static let PSD_ACC: CoreBluetooth.CBUUID
  public init(gattServiceTransmitter: any PolarBleSdk.BleAttributeTransportProtocol)
  override public func disconnected()
  override public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  public func sendControlpointCommand(_ command: PolarBleSdk.BlePsdClient.PsdMessage, value: [Swift.UInt8]) -> RxSwift.Single<PolarBleSdk.Psd.PsdResponse>
  public func observePsdPPNotifications(_ checkConnection: Swift.Bool) -> RxSwift.Observable<PolarBleSdk.Psd.PPData>
  public func readFeature(_ checkConnection: Swift.Bool) -> RxSwift.Single<PolarBleSdk.Psd.PsdFeature>
  override public func clientReady(_ checkConnection: Swift.Bool) -> RxSwift.Completable
  @objc deinit
}
public enum FirmwareUpdateStatus {
  case fetchingFwUpdatePackage(details: Swift.String)
  case preparingDeviceForFwUpdate(details: Swift.String)
  case writingFwUpdatePackage(details: Swift.String)
  case finalizingFwUpdate(details: Swift.String)
  case fwUpdateCompletedSuccessfully(details: Swift.String)
  case fwUpdateNotAvailable(details: Swift.String)
  case fwUpdateFailed(details: Swift.String)
}
@_hasMissingDesignatedInitializers public class BleGattClientBase : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public func disconnected()
  public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  public func notifyDescriptorWritten(_ chr: CoreBluetooth.CBUUID, enabled: Swift.Bool, err: Swift.Int)
  public func serviceDataWritten(_ chr: CoreBluetooth.CBUUID, err: Swift.Int)
  public func processCharacteristicDiscovered(_ characteristic: CoreBluetooth.CBUUID, properties: Swift.UInt)
  public func clientReady(_ checkConnection: Swift.Bool) -> RxSwift.Completable
  public func setServiceDiscovered(_ value: Swift.Bool)
  public func isServiceDiscovered() -> Swift.Bool
  public func serviceBelongsToClient(_ uuid: CoreBluetooth.CBUUID) -> Swift.Bool
  public func setMtu(_ mtuSize: Swift.Int)
  public func isCharacteristicNotificationEnabled(_ uuid: CoreBluetooth.CBUUID) -> Swift.Bool
  public func waitDiscovered(checkConnection: Swift.Bool) -> RxSwift.Completable
  public func waitNotificationEnabled(_ chr: CoreBluetooth.CBUUID, checkConnection: Swift.Bool) -> RxSwift.Completable
  public func tearDown() -> RxSwift.Completable
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: PolarBleSdk.BleGattClientBase, rhs: PolarBleSdk.BleGattClientBase) -> Swift.Bool
public struct PolarSensorSetting {
  public enum SettingType : Swift.Int {
    case sampleRate
    case resolution
    case range
    case rangeMilliunit
    case channels
    case unknown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public let settings: [PolarBleSdk.PolarSensorSetting.SettingType : Swift.Set<Swift.UInt32>]
  public init(_ settings: [PolarBleSdk.PolarSensorSetting.SettingType : Swift.UInt32])
  public func maxSettings() -> PolarBleSdk.PolarSensorSetting
}
extension PolarBleSdk.PolarSensorSetting : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum PmdSdkMode : Swift.UInt8, Swift.CaseIterable {
  case disabled
  case enabled
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [PolarBleSdk.PmdSdkMode]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [PolarBleSdk.PmdSdkMode] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_hasMissingDesignatedInitializers public class HealthThermometer {
  public static let HTS_SERVICE: CoreBluetooth.CBUUID
  public static let TEMPERATURE_MEASUREMENT: CoreBluetooth.CBUUID
  public static let TEMPERATURE_TYPE: CoreBluetooth.CBUUID
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BleHtsClient : PolarBleSdk.BleGattClientBase {
  public struct TemperatureMeasurement {
    public let temperatureCelsius: Swift.Float
    public let temperatureFahrenheit: Swift.Float
  }
  public init(gattServiceTransmitter: any PolarBleSdk.BleAttributeTransportProtocol)
  override public func disconnected()
  override public func processServiceData(_ chr: CoreBluetooth.CBUUID, data: Foundation.Data, err: Swift.Int)
  public func observeHtsNotifications(checkConnection: Swift.Bool) -> RxSwift.Observable<PolarBleSdk.BleHtsClient.TemperatureMeasurement>
  @objc deinit
}
public enum PmdRecordingType : Swift.UInt8, Swift.CaseIterable {
  case online
  case offline
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [PolarBleSdk.PmdRecordingType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [PolarBleSdk.PmdRecordingType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
public protocol BleAttributeTransportProtocol : AnyObject {
  func transmitMessage(_ parent: PolarBleSdk.BleGattClientBase, serviceUuid: CoreBluetooth.CBUUID, characteristicUuid: CoreBluetooth.CBUUID, packet: Foundation.Data, withResponse: Swift.Bool) throws
  func readValue(_ parent: PolarBleSdk.BleGattClientBase, serviceUuid: CoreBluetooth.CBUUID, characteristicUuid: CoreBluetooth.CBUUID) throws
  func setCharacteristicNotify(_ parent: PolarBleSdk.BleGattClientBase, serviceUuid: CoreBluetooth.CBUUID, characteristicUuid: CoreBluetooth.CBUUID, notify: Swift.Bool) throws
  func isConnected() -> Swift.Bool
  func attributeOperationStarted()
  func attributeOperationFinished()
}
@_hasMissingDesignatedInitializers public class TemperatureData {
  @objc deinit
}
public struct PolarOfflineRecordingEntry : Swift.Equatable {
  public let path: Swift.String
  public let size: Swift.UInt
  public let date: Foundation.Date
  public let type: PolarBleSdk.PolarDeviceDataType
  public init(path: Swift.String, size: Swift.UInt, date: Foundation.Date, type: PolarBleSdk.PolarDeviceDataType)
  public static func == (a: PolarBleSdk.PolarOfflineRecordingEntry, b: PolarBleSdk.PolarOfflineRecordingEntry) -> Swift.Bool
}
public protocol BleLoggerProtocol {
  func logMessage(_ message: Swift.String)
}
@_hasMissingDesignatedInitializers public class BleLogger {
  public static let sharedInstance: PolarBleSdk.BleLogger
  public static let LOG_LEVEL_ALL: Swift.Int
  public static let LOG_LEVEL_ERROR: Swift.Int
  public static let LOG_LEVEL_TRACE: Swift.Int
  public static let LOG_LEVEL_HEX: Swift.Int
  public static func setLogLevel(_ level: Swift.Int)
  public static func setLogger(_ logger: (any PolarBleSdk.BleLoggerProtocol)?)
  public static func trace(_ strings: Swift.String...)
  public static func error(_ strings: Swift.String...)
  public static func trace_if_error(_ message: Swift.String, error: (any Swift.Error)?)
  public static func trace_hex(_ message: Swift.String, data: Foundation.Data)
  public static func trace_hex(_ message: Swift.String, data: [Swift.UInt8])
  @objc deinit
}
public protocol PolarOfflineRecordingApi {
  func getAvailableOfflineRecordingDataTypes(_ identifier: Swift.String) -> RxSwift.Single<Swift.Set<PolarBleSdk.PolarDeviceDataType>>
  func requestOfflineRecordingSettings(_ identifier: Swift.String, feature: PolarBleSdk.PolarDeviceDataType) -> RxSwift.Single<PolarBleSdk.PolarSensorSetting>
  func requestFullOfflineRecordingSettings(_ identifier: Swift.String, feature: PolarBleSdk.PolarDeviceDataType) -> RxSwift.Single<PolarBleSdk.PolarSensorSetting>
  func getOfflineRecordingStatus(_ identifier: Swift.String) -> RxSwift.Single<[PolarBleSdk.PolarDeviceDataType : Swift.Bool]>
  func listOfflineRecordings(_ identifier: Swift.String) -> RxSwift.Observable<PolarBleSdk.PolarOfflineRecordingEntry>
  func getOfflineRecord(_ identifier: Swift.String, entry: PolarBleSdk.PolarOfflineRecordingEntry, secret: PolarBleSdk.PolarRecordingSecret?) -> RxSwift.Single<PolarBleSdk.PolarOfflineRecordingData>
  func listSplitOfflineRecordings(_ identifier: Swift.String) -> RxSwift.Observable<PolarBleSdk.PolarOfflineRecordingEntry>
  func getSplitOfflineRecord(_ identifier: Swift.String, entry: PolarBleSdk.PolarOfflineRecordingEntry, secret: PolarBleSdk.PolarRecordingSecret?) -> RxSwift.Single<PolarBleSdk.PolarOfflineRecordingData>
  func removeOfflineRecord(_ identifier: Swift.String, entry: PolarBleSdk.PolarOfflineRecordingEntry) -> RxSwift.Completable
  func startOfflineRecording(_ identifier: Swift.String, feature: PolarBleSdk.PolarDeviceDataType, settings: PolarBleSdk.PolarSensorSetting?, secret: PolarBleSdk.PolarRecordingSecret?) -> RxSwift.Completable
  func stopOfflineRecording(_ identifier: Swift.String, feature: PolarBleSdk.PolarDeviceDataType) -> RxSwift.Completable
  func setOfflineRecordingTrigger(_ identifier: Swift.String, trigger: PolarBleSdk.PolarOfflineRecordingTrigger, secret: PolarBleSdk.PolarRecordingSecret?) -> RxSwift.Completable
  func getOfflineRecordingTriggerSetup(_ identifier: Swift.String) -> RxSwift.Single<PolarBleSdk.PolarOfflineRecordingTrigger>
}
public enum Protocol_PbPFtpDevToHostNotification : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case filesystemModified
  case internalTestEvent
  case idling
  case batteryStatus
  case inactivityAlert
  case trainingSessionStatus
  case syncRequired
  case autosyncStatus
  case pnsDhNotificationResponse
  case pnsSettings
  case startGpsMeasurement
  case stopGpsMeasurement
  case keepBackgroundAlive
  case polarShellDhData
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpDevToHostNotification : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPFtpDevToHostNotification]
  public static var allCases: [PolarBleSdk.Protocol_PbPFtpDevToHostNotification] {
    get
  }
}
public enum Protocol_Action : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case created
  case updated
  case removed
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_Action : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_Action]
  public static var allCases: [PolarBleSdk.Protocol_Action] {
    get
  }
}
public enum Protocol_PbPftpPnsDHAttributeType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case unknownAction
  case positiveAction
  case negativeAction
  case clearAction
  case aAction
  case bAction
  case cAction
  case dAction
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsDHAttributeType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPftpPnsDHAttributeType]
  public static var allCases: [PolarBleSdk.Protocol_PbPftpPnsDHAttributeType] {
    get
  }
}
public enum Protocol_PbPFtpHostToDevNotification : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case startSync
  case stopSync
  case reset
  case lockProductionData
  case terminateSync
  case keepAlive
  case startAutosync
  case pnsHdNotification
  case initializeSession
  case terminateSession
  case simulateButtonPress
  case simulateTouchScreen
  case requestSync
  case firmwareUpdateAvailable
  case gpsData
  case gpsLost
  case gpsNoPermission
  case polarShellHdData
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpHostToDevNotification : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPFtpHostToDevNotification]
  public static var allCases: [PolarBleSdk.Protocol_PbPFtpHostToDevNotification] {
    get
  }
}
public enum Protocol_PbPftpPnsHDCategoryID : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case categoryIDOther
  case categoryIDPolar
  case categoryIDIncomingcall
  case categoryIDMissedcall
  case categoryIDVoicemail
  case categoryIDSocial
  case categoryIDSchedule
  case categoryIDEmail
  case categoryIDNews
  case categoryIDHealthandfitness
  case categoryIDBusinessandfinance
  case categoryIDLocation
  case categoryIDEntertainment
  case categoryIDAlarm
  case categoryIDPromo
  case categoryIDRecommendation
  case categoryIDStatus
  case categoryIDTransport
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsHDCategoryID : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPftpPnsHDCategoryID]
  public static var allCases: [PolarBleSdk.Protocol_PbPftpPnsHDCategoryID] {
    get
  }
}
public enum Protocol_PbPftpPnsHDAttributeType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case title
  case subtitle
  case message
  case positiveActionLabel
  case negativeActionLabel
  case applicationName
  case clearActionLabel
  case aActionLabel
  case bActionLabel
  case cActionLabel
  case dActionLabel
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsHDAttributeType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPftpPnsHDAttributeType]
  public static var allCases: [PolarBleSdk.Protocol_PbPftpPnsHDAttributeType] {
    get
  }
}
public struct Protocol_PbPFtpFilesystemModifiedParams {
  public var action: PolarBleSdk.Protocol_Action {
    get
    set
  }
  public var hasAction: Swift.Bool {
    get
  }
  public mutating func clearAction()
  public var path: Swift.String {
    get
    set
  }
  public var hasPath: Swift.Bool {
    get
  }
  public mutating func clearPath()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpInactivityAlert {
  public var countdown: Swift.UInt32 {
    get
    set
  }
  public var hasCountdown: Swift.Bool {
    get
  }
  public mutating func clearCountdown()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpTrainingSessionStatus {
  public var inprogress: Swift.Bool {
    get
    set
  }
  public var hasInprogress: Swift.Bool {
    get
  }
  public mutating func clearInprogress()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpAutoSyncStatusParams {
  public var succeeded: Swift.Bool {
    get
    set
  }
  public var hasSucceeded: Swift.Bool {
    get
  }
  public mutating func clearSucceeded()
  public var description_p: Swift.String {
    get
    set
  }
  public var hasDescription_p: Swift.Bool {
    get
  }
  public mutating func clearDescription_p()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpPolarShellMessageParams {
  public var polarShellMsgID: Swift.UInt32 {
    get
    set
  }
  public var hasPolarShellMsgID: Swift.Bool {
    get
  }
  public mutating func clearPolarShellMsgID()
  public var data: Swift.String {
    get
    set
  }
  public var hasData: Swift.Bool {
    get
  }
  public mutating func clearData()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPftpPnsDHAttribute {
  public var type: PolarBleSdk.Protocol_PbPftpPnsDHAttributeType {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPftpPnsDHNotificationResponse {
  public var notificationID: Swift.UInt32 {
    get
    set
  }
  public var hasNotificationID: Swift.Bool {
    get
  }
  public mutating func clearNotificationID()
  public var attributes: [PolarBleSdk.Protocol_PbPftpPnsDHAttribute]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPftpPnsState {
  public var notificationsEnabled: Swift.Bool {
    get
    set
  }
  public var hasNotificationsEnabled: Swift.Bool {
    get
  }
  public mutating func clearNotificationsEnabled()
  public var previewEnabled: Swift.Bool {
    get
    set
  }
  public var hasPreviewEnabled: Swift.Bool {
    get
  }
  public mutating func clearPreviewEnabled()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPftpStartGPSMeasurement {
  public var minimumInterval: Swift.UInt32 {
    get
    set
  }
  public var hasMinimumInterval: Swift.Bool {
    get
  }
  public mutating func clearMinimumInterval()
  public var accuracy: Swift.UInt32 {
    get
    set
  }
  public var hasAccuracy: Swift.Bool {
    get
  }
  public mutating func clearAccuracy()
  public var latitude: Swift.Double {
    get
    set
  }
  public var hasLatitude: Swift.Bool {
    get
  }
  public mutating func clearLatitude()
  public var longitude: Swift.Double {
    get
    set
  }
  public var hasLongitude: Swift.Bool {
    get
  }
  public mutating func clearLongitude()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbInitializeSessionParams {
  public var usesAttributeLevelResponse: Swift.Bool {
    get
    set
  }
  public var hasUsesAttributeLevelResponse: Swift.Bool {
    get
  }
  public mutating func clearUsesAttributeLevelResponse()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbFirmwareUpdateAvailableParams {
  public var mandatory: Swift.Bool {
    get
    set
  }
  public var hasMandatory: Swift.Bool {
    get
  }
  public mutating func clearMandatory()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpSimulateButtonPressParams {
  public var button: PolarBleSdk.Buttons {
    get
    set
  }
  public var hasButton: Swift.Bool {
    get
  }
  public mutating func clearButton()
  public var state: PolarBleSdk.ButtonState {
    get
    set
  }
  public var hasState: Swift.Bool {
    get
  }
  public mutating func clearState()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpTouchPosition {
  public var pos: Swift.UInt32 {
    get
    set
  }
  public var hasPos: Swift.Bool {
    get
  }
  public mutating func clearPos()
  public var maxPos: Swift.UInt32 {
    get
    set
  }
  public var hasMaxPos: Swift.Bool {
    get
  }
  public mutating func clearMaxPos()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpSimulateTouchScreenParams {
  public var state: PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams.PbPFtpTouchState {
    get
    set
  }
  public var hasState: Swift.Bool {
    get
  }
  public mutating func clearState()
  public var xPos: PolarBleSdk.Protocol_PbPFtpTouchPosition {
    get
    set
  }
  public var hasXPos: Swift.Bool {
    get
  }
  public mutating func clearXPos()
  public var yPos: PolarBleSdk.Protocol_PbPFtpTouchPosition {
    get
    set
  }
  public var hasYPos: Swift.Bool {
    get
  }
  public mutating func clearYPos()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbPFtpTouchState : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case touchStateStart
    case touchStatePosition
    case touchStateEnd
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams.PbPFtpTouchState : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams.PbPFtpTouchState]
  public static var allCases: [PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams.PbPFtpTouchState] {
    get
  }
}
public struct Protocol_PbPFtpStopSyncParams {
  public var completed: Swift.Bool {
    get
    set
  }
  public var hasCompleted: Swift.Bool {
    get
  }
  public mutating func clearCompleted()
  public var description_p: Swift.String {
    get
    set
  }
  public var hasDescription_p: Swift.Bool {
    get
  }
  public mutating func clearDescription_p()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpFactoryResetParams {
  public var sleep: Swift.Bool {
    get
    set
  }
  public var hasSleep: Swift.Bool {
    get
  }
  public mutating func clearSleep()
  public var doFactoryDefaults: Swift.Bool {
    get
    set
  }
  public var hasDoFactoryDefaults: Swift.Bool {
    get
  }
  public mutating func clearDoFactoryDefaults()
  public var otaFwupdate: Swift.Bool {
    get
    set
  }
  public var hasOtaFwupdate: Swift.Bool {
    get
  }
  public mutating func clearOtaFwupdate()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpStartAutosyncParams {
  public var timeout: Swift.UInt32 {
    get
    set
  }
  public var hasTimeout: Swift.Bool {
    get
  }
  public mutating func clearTimeout()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPftpPnsHDAttribute {
  public var type: PolarBleSdk.Protocol_PbPftpPnsHDAttributeType {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var data: Swift.String {
    get
    set
  }
  public var hasData: Swift.Bool {
    get
  }
  public mutating func clearData()
  public var attributeFullSize: Swift.UInt32 {
    get
    set
  }
  public var hasAttributeFullSize: Swift.Bool {
    get
  }
  public mutating func clearAttributeFullSize()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPftpPnsHDNotification {
  public var notificationID: Swift.UInt32 {
    get
    set
  }
  public var hasNotificationID: Swift.Bool {
    get
  }
  public mutating func clearNotificationID()
  public var categoryID: PolarBleSdk.Protocol_PbPftpPnsHDCategoryID {
    get
    set
  }
  public var hasCategoryID: Swift.Bool {
    get
  }
  public mutating func clearCategoryID()
  public var action: PolarBleSdk.Protocol_Action {
    get
    set
  }
  public var hasAction: Swift.Bool {
    get
  }
  public mutating func clearAction()
  public var issueTime: PolarBleSdk.PbLocalDateTime {
    get
    set
  }
  public var hasIssueTime: Swift.Bool {
    get
  }
  public mutating func clearIssueTime()
  public var newSameCategoryNotifications: Swift.UInt32 {
    get
    set
  }
  public var hasNewSameCategoryNotifications: Swift.Bool {
    get
  }
  public mutating func clearNewSameCategoryNotifications()
  public var unreadSameCategoryNotifications: Swift.UInt32 {
    get
    set
  }
  public var hasUnreadSameCategoryNotifications: Swift.Bool {
    get
  }
  public mutating func clearUnreadSameCategoryNotifications()
  public var attributes: [PolarBleSdk.Protocol_PbPftpPnsHDAttribute]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGPSDataParams {
  public var latitude: Swift.Double {
    get
    set
  }
  public var hasLatitude: Swift.Bool {
    get
  }
  public mutating func clearLatitude()
  public var longitude: Swift.Double {
    get
    set
  }
  public var hasLongitude: Swift.Bool {
    get
  }
  public mutating func clearLongitude()
  public var speed: Swift.Float {
    get
    set
  }
  public var hasSpeed: Swift.Bool {
    get
  }
  public mutating func clearSpeed()
  public var distance: Swift.Float {
    get
    set
  }
  public var hasDistance: Swift.Bool {
    get
  }
  public mutating func clearDistance()
  public var altitude: Swift.Float {
    get
    set
  }
  public var hasAltitude: Swift.Bool {
    get
  }
  public mutating func clearAltitude()
  public var satelliteAmount: Swift.UInt32 {
    get
    set
  }
  public var hasSatelliteAmount: Swift.Bool {
    get
  }
  public mutating func clearSatelliteAmount()
  public var timeOffset: Swift.UInt32 {
    get
    set
  }
  public var hasTimeOffset: Swift.Bool {
    get
  }
  public mutating func clearTimeOffset()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension PolarBleSdk.Protocol_PbPFtpDevToHostNotification : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_Action : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPftpPnsDHAttributeType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPFtpHostToDevNotification : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPftpPnsHDCategoryID : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPftpPnsHDAttributeType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPFtpFilesystemModifiedParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpFilesystemModifiedParams, rhs: PolarBleSdk.Protocol_PbPFtpFilesystemModifiedParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpInactivityAlert : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpInactivityAlert, rhs: PolarBleSdk.Protocol_PbPFtpInactivityAlert) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpTrainingSessionStatus : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpTrainingSessionStatus, rhs: PolarBleSdk.Protocol_PbPFtpTrainingSessionStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpAutoSyncStatusParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpAutoSyncStatusParams, rhs: PolarBleSdk.Protocol_PbPFtpAutoSyncStatusParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpPolarShellMessageParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpPolarShellMessageParams, rhs: PolarBleSdk.Protocol_PbPFtpPolarShellMessageParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsDHAttribute : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPftpPnsDHAttribute, rhs: PolarBleSdk.Protocol_PbPftpPnsDHAttribute) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsDHNotificationResponse : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPftpPnsDHNotificationResponse, rhs: PolarBleSdk.Protocol_PbPftpPnsDHNotificationResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsState : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPftpPnsState, rhs: PolarBleSdk.Protocol_PbPftpPnsState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpStartGPSMeasurement : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPftpStartGPSMeasurement, rhs: PolarBleSdk.Protocol_PbPftpStartGPSMeasurement) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbInitializeSessionParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbInitializeSessionParams, rhs: PolarBleSdk.Protocol_PbInitializeSessionParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbFirmwareUpdateAvailableParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbFirmwareUpdateAvailableParams, rhs: PolarBleSdk.Protocol_PbFirmwareUpdateAvailableParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpSimulateButtonPressParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpSimulateButtonPressParams, rhs: PolarBleSdk.Protocol_PbPFtpSimulateButtonPressParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpTouchPosition : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpTouchPosition, rhs: PolarBleSdk.Protocol_PbPFtpTouchPosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams, rhs: PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpSimulateTouchScreenParams.PbPFtpTouchState : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPFtpStopSyncParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpStopSyncParams, rhs: PolarBleSdk.Protocol_PbPFtpStopSyncParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpFactoryResetParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpFactoryResetParams, rhs: PolarBleSdk.Protocol_PbPFtpFactoryResetParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpStartAutosyncParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpStartAutosyncParams, rhs: PolarBleSdk.Protocol_PbPFtpStartAutosyncParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsHDAttribute : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPftpPnsHDAttribute, rhs: PolarBleSdk.Protocol_PbPftpPnsHDAttribute) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPftpPnsHDNotification : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPftpPnsHDNotification, rhs: PolarBleSdk.Protocol_PbPftpPnsHDNotification) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGPSDataParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGPSDataParams, rhs: PolarBleSdk.Protocol_PbPFtpGPSDataParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum BleState : Swift.Int {
  case unknown
  case resetting
  case unsupported
  case unauthorized
  case poweredOff
  case poweredOn
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol BleDeviceListener {
  func blePowered() -> Swift.Bool
  @available(*, deprecated, message: "use powerStateObserver instead")
  func monitorBleState() -> RxSwift.Observable<PolarBleSdk.BleState>
  var powerStateObserver: (any PolarBleSdk.BlePowerStateObserver)? { get set }
  var automaticReconnection: Swift.Bool { get set }
  var servicesToScanFor: [CoreBluetooth.CBUUID]? { get set }
  var scanPreFilter: ((_ content: PolarBleSdk.BleAdvertisementContent) -> Swift.Bool)? { get set }
  var automaticH10Mapping: Swift.Bool { get set }
  func search(_ uuids: [CoreBluetooth.CBUUID]?, identifiers: [Foundation.UUID]?, fetchKnownDevices: Swift.Bool) -> RxSwift.Observable<PolarBleSdk.BleDeviceSession>
  func openSessionDirect(_ session: PolarBleSdk.BleDeviceSession)
  func monitorDeviceSessionState() -> RxSwift.Observable<(session: PolarBleSdk.BleDeviceSession, state: PolarBleSdk.BleDeviceSession.DeviceSessionState)>
  @available(*, deprecated, message: "use monitorDeviceSessionState instead")
  var deviceSessionStateObserver: (any PolarBleSdk.BleDeviceSessionStateObserver)? { get set }
  func closeSessionDirect(_ session: PolarBleSdk.BleDeviceSession)
  @discardableResult
  func removeAllSessions(_ inState: Swift.Set<PolarBleSdk.BleDeviceSession.DeviceSessionState>) -> Swift.Int
  @discardableResult
  func removeAllSessions() -> Swift.Int
  func allSessions() -> [PolarBleSdk.BleDeviceSession]
}
public protocol BleDeviceSessionStateObserver : AnyObject {
  func stateChanged(_ session: PolarBleSdk.BleDeviceSession)
}
public protocol BlePowerStateObserver : AnyObject {
  func powerStateChanged(_ state: PolarBleSdk.BleState)
}
extension PolarBleSdk.BleDeviceListener {
  public func search(_ uuids: [CoreBluetooth.CBUUID]? = nil, identifiers: [Foundation.UUID]? = nil, fetchKnownDevices: Swift.Bool = false) -> RxSwift.Observable<PolarBleSdk.BleDeviceSession>
}
extension RxSwift.Observable where Element : Swift.Hashable {
  public func distinct() -> RxSwift.Observable<Element>
}
public struct PolarRecordingSecret {
  public init(key: Foundation.Data) throws
}
public struct PbVolumeTarget {
  public var targetType: PolarBleSdk.PbVolumeTarget.PbVolymeTargetType {
    get
    set
  }
  public var hasTargetType: Swift.Bool {
    get
  }
  public mutating func clearTargetType()
  public var duration: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasDuration: Swift.Bool {
    get
  }
  public mutating func clearDuration()
  public var distance: Swift.Float {
    get
    set
  }
  public var hasDistance: Swift.Bool {
    get
  }
  public mutating func clearDistance()
  public var calories: Swift.UInt32 {
    get
    set
  }
  public var hasCalories: Swift.Bool {
    get
  }
  public mutating func clearCalories()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbVolymeTargetType : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case volumeTargetTypeDuration
    case volumeTargetTypeDistance
    case volumeTargetTypeCalories
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbVolumeTarget.PbVolymeTargetType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbVolumeTarget.PbVolymeTargetType]
  public static var allCases: [PolarBleSdk.PbVolumeTarget.PbVolymeTargetType] {
    get
  }
}
public struct PbStravaSegmentTargets {
  public var ownBest: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasOwnBest: Swift.Bool {
    get
  }
  public mutating func clearOwnBest()
  public var komQom: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasKomQom: Swift.Bool {
    get
  }
  public mutating func clearKomQom()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbStravaSegmentTarget {
  public var stravaSegmentType: PolarBleSdk.PbStravaSegmentTarget.PbStravaSegmentType {
    get
    set
  }
  public var hasStravaSegmentType: Swift.Bool {
    get
  }
  public mutating func clearStravaSegmentType()
  public var stravaSegmentTargets: PolarBleSdk.PbStravaSegmentTargets {
    get
    set
  }
  public var hasStravaSegmentTargets: Swift.Bool {
    get
  }
  public mutating func clearStravaSegmentTargets()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbStravaSegmentType : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case stravaSegmentTypeRide
    case stravaSegmentTypeRun
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbStravaSegmentTarget.PbStravaSegmentType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbStravaSegmentTarget.PbStravaSegmentType]
  public static var allCases: [PolarBleSdk.PbStravaSegmentTarget.PbStravaSegmentType] {
    get
  }
}
public struct PbFuelingReminder {
  public var timestamp: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasTimestamp: Swift.Bool {
    get
  }
  public mutating func clearTimestamp()
  public var fuelingReminderType: PolarBleSdk.PbFuelingReminder.PbFuelingReminderType {
    get
    set
  }
  public var hasFuelingReminderType: Swift.Bool {
    get
  }
  public mutating func clearFuelingReminderType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbFuelingReminderType : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case reminderTypeEnergyManual
    case reminderTypeEnergySmart
    case reminderTypeHydration
    case reminderTypeHydrationAndEnergyManual
    case reminderTypeHydrationAndEnergySmart
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbFuelingReminder.PbFuelingReminderType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbFuelingReminder.PbFuelingReminderType]
  public static var allCases: [PolarBleSdk.PbFuelingReminder.PbFuelingReminderType] {
    get
  }
}
public struct PbTrainingLoad {
  public var trainingLoadVal: Swift.UInt32 {
    get
    set
  }
  public var hasTrainingLoadVal: Swift.Bool {
    get
  }
  public mutating func clearTrainingLoadVal()
  public var recoveryTime: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasRecoveryTime: Swift.Bool {
    get
  }
  public mutating func clearRecoveryTime()
  public var carbohydrateConsumption: Swift.UInt32 {
    get
    set
  }
  public var hasCarbohydrateConsumption: Swift.Bool {
    get
  }
  public mutating func clearCarbohydrateConsumption()
  public var proteinConsumption: Swift.UInt32 {
    get
    set
  }
  public var hasProteinConsumption: Swift.Bool {
    get
  }
  public mutating func clearProteinConsumption()
  public var fatConsumption: Swift.UInt32 {
    get
    set
  }
  public var hasFatConsumption: Swift.Bool {
    get
  }
  public mutating func clearFatConsumption()
  public var carbohydrateGrams: Swift.Float {
    get
    set
  }
  public var hasCarbohydrateGrams: Swift.Bool {
    get
  }
  public mutating func clearCarbohydrateGrams()
  public var proteinGrams: Swift.Float {
    get
    set
  }
  public var hasProteinGrams: Swift.Bool {
    get
  }
  public mutating func clearProteinGrams()
  public var fatGrams: Swift.Float {
    get
    set
  }
  public var hasFatGrams: Swift.Bool {
    get
  }
  public mutating func clearFatGrams()
  public var mealSize: Swift.Float {
    get
    set
  }
  public var hasMealSize: Swift.Bool {
    get
  }
  public mutating func clearMealSize()
  public var fuelingReminders: [PolarBleSdk.PbFuelingReminder]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbHeartRateZone {
  public var lowerLimit: Swift.UInt32 {
    get
    set
  }
  public var hasLowerLimit: Swift.Bool {
    get
  }
  public mutating func clearLowerLimit()
  public var higherLimit: Swift.UInt32 {
    get
    set
  }
  public var hasHigherLimit: Swift.Bool {
    get
  }
  public mutating func clearHigherLimit()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSpeedZone {
  public var lowerLimit: Swift.Float {
    get
    set
  }
  public var hasLowerLimit: Swift.Bool {
    get
  }
  public mutating func clearLowerLimit()
  public var higherLimit: Swift.Float {
    get
    set
  }
  public var hasHigherLimit: Swift.Bool {
    get
  }
  public mutating func clearHigherLimit()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbPowerZone {
  public var lowerLimit: Swift.UInt32 {
    get
    set
  }
  public var hasLowerLimit: Swift.Bool {
    get
  }
  public mutating func clearLowerLimit()
  public var higherLimit: Swift.UInt32 {
    get
    set
  }
  public var hasHigherLimit: Swift.Bool {
    get
  }
  public mutating func clearHigherLimit()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbZones {
  public var heartRateZone: [PolarBleSdk.PbHeartRateZone]
  public var speedZone: [PolarBleSdk.PbSpeedZone]
  public var powerZone: [PolarBleSdk.PbPowerZone]
  public var heartRateSettingSource: PolarBleSdk.PbHeartRateZoneSettingSource {
    get
    set
  }
  public var hasHeartRateSettingSource: Swift.Bool {
    get
  }
  public mutating func clearHeartRateSettingSource()
  public var powerSettingSource: PolarBleSdk.PbPowerZoneSettingSource {
    get
    set
  }
  public var hasPowerSettingSource: Swift.Bool {
    get
  }
  public mutating func clearPowerSettingSource()
  public var speedSettingSource: PolarBleSdk.PbSpeedZoneSettingSource {
    get
    set
  }
  public var hasSpeedSettingSource: Swift.Bool {
    get
  }
  public mutating func clearSpeedSettingSource()
  public var powerZoneCalculationMethod: PolarBleSdk.PbPowerZoneCalculationMethod {
    get
    set
  }
  public var hasPowerZoneCalculationMethod: Swift.Bool {
    get
  }
  public mutating func clearPowerZoneCalculationMethod()
  public var speedZoneCalculationMethod: PolarBleSdk.PbSpeedZoneCalculationMethod {
    get
    set
  }
  public var hasSpeedZoneCalculationMethod: Swift.Bool {
    get
  }
  public mutating func clearSpeedZoneCalculationMethod()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbBleMac {
  public var mac: Foundation.Data {
    get
    set
  }
  public var hasMac: Swift.Bool {
    get
  }
  public mutating func clearMac()
  public var type: PolarBleSdk.PbMacType {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbBleDeviceName {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbDeviceId {
  public var deviceID: Swift.String {
    get
    set
  }
  public var hasDeviceID: Swift.Bool {
    get
  }
  public mutating func clearDeviceID()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbRunningIndex {
  public var value: Swift.UInt32 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var calculationTime: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasCalculationTime: Swift.Bool {
    get
  }
  public mutating func clearCalculationTime()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSportIdentifier {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbOneLineText {
  public var text: Swift.String {
    get
    set
  }
  public var hasText: Swift.Bool {
    get
  }
  public mutating func clearText()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbMultiLineText {
  public var text: Swift.String {
    get
    set
  }
  public var hasText: Swift.Bool {
    get
  }
  public mutating func clearText()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbLanguageId {
  public var language: Swift.String {
    get
    set
  }
  public var hasLanguage: Swift.Bool {
    get
  }
  public mutating func clearLanguage()
  public var region: Swift.String {
    get
    set
  }
  public var hasRegion: Swift.Bool {
    get
  }
  public mutating func clearRegion()
  public var script: Swift.String {
    get
    set
  }
  public var hasScript: Swift.Bool {
    get
  }
  public mutating func clearScript()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbTrainingSessionTargetId {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var lastModified: PolarBleSdk.PbSystemDateTime {
    get
    set
  }
  public var hasLastModified: Swift.Bool {
    get
  }
  public mutating func clearLastModified()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbTrainingSessionFavoriteId {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var lastModified: PolarBleSdk.PbSystemDateTime {
    get
    set
  }
  public var hasLastModified: Swift.Bool {
    get
  }
  public mutating func clearLastModified()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbRouteId {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSwimmingPoolInfo {
  public var poolLength: Swift.Float {
    get
    set
  }
  public var hasPoolLength: Swift.Bool {
    get
  }
  public mutating func clearPoolLength()
  public var swimmingPoolType: PolarBleSdk.PbSwimmingPoolUnits {
    get
    set
  }
  public var hasSwimmingPoolType: Swift.Bool {
    get
  }
  public mutating func clearSwimmingPoolType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbTrainingProgramId {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbEventId {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbOnDemandTrainingTargetTypeId {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbPauseTime {
  public var startTime: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasStartTime: Swift.Bool {
    get
  }
  public mutating func clearStartTime()
  public var duration: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasDuration: Swift.Bool {
    get
  }
  public mutating func clearDuration()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbApplicationId {
  public var value: Swift.UInt64 {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbVersion {
  public var major: Swift.UInt32 {
    get
    set
  }
  public var hasMajor: Swift.Bool {
    get
  }
  public mutating func clearMajor()
  public var minor: Swift.UInt32 {
    get
    set
  }
  public var hasMinor: Swift.Bool {
    get
  }
  public mutating func clearMinor()
  public var patch: Swift.UInt32 {
    get
    set
  }
  public var hasPatch: Swift.Bool {
    get
  }
  public mutating func clearPatch()
  public var specifier: Swift.String {
    get
    set
  }
  public var hasSpecifier: Swift.Bool {
    get
  }
  public mutating func clearSpecifier()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbAlgorithmVersion {
  public var ohrVersion: PolarBleSdk.PbVersion {
    get
    set
  }
  public var hasOhrVersion: Swift.Bool {
    get
  }
  public mutating func clearOhrVersion()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSubcomponentInfo {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var obsoleteRequiredVersion: PolarBleSdk.PbVersion {
    get
    set
  }
  public var hasObsoleteRequiredVersion: Swift.Bool {
    get
  }
  public mutating func clearObsoleteRequiredVersion()
  public var version: PolarBleSdk.PbVersion {
    get
    set
  }
  public var hasVersion: Swift.Bool {
    get
  }
  public mutating func clearVersion()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbBleUuid {
  public var uuid: Foundation.Data {
    get
    set
  }
  public var hasUuid: Swift.Bool {
    get
  }
  public mutating func clearUuid()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbBleCharacteristic {
  public var handle: Swift.UInt32 {
    get
    set
  }
  public var hasHandle: Swift.Bool {
    get
  }
  public mutating func clearHandle()
  public var type: PolarBleSdk.PbBleUuid {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbBleService {
  public var serviceUuid: PolarBleSdk.PbBleUuid {
    get
    set
  }
  public var hasServiceUuid: Swift.Bool {
    get
  }
  public mutating func clearServiceUuid()
  public var characteristics: [PolarBleSdk.PbBleCharacteristic]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSourceDevice {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var manufacturer: Swift.String {
    get
    set
  }
  public var hasManufacturer: Swift.Bool {
    get
  }
  public mutating func clearManufacturer()
  public var modelNumber: Swift.String {
    get
    set
  }
  public var hasModelNumber: Swift.Bool {
    get
  }
  public mutating func clearModelNumber()
  public var hardwareCode: Swift.String {
    get
    set
  }
  public var hasHardwareCode: Swift.Bool {
    get
  }
  public mutating func clearHardwareCode()
  public var platformVersion: PolarBleSdk.PbVersion {
    get
    set
  }
  public var hasPlatformVersion: Swift.Bool {
    get
  }
  public mutating func clearPlatformVersion()
  public var softwareVersion: PolarBleSdk.PbVersion {
    get
    set
  }
  public var hasSoftwareVersion: Swift.Bool {
    get
  }
  public mutating func clearSoftwareVersion()
  public var polarmathsmartVersion: PolarBleSdk.PbVersion {
    get
    set
  }
  public var hasPolarmathsmartVersion: Swift.Bool {
    get
  }
  public mutating func clearPolarmathsmartVersion()
  public var collector: PolarBleSdk.PbSourceDevice {
    get
    set
  }
  public var hasCollector: Swift.Bool {
    get
  }
  public mutating func clearCollector()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSampleSourceDevice {
  public var startIndex: Swift.UInt32 {
    get
    set
  }
  public var hasStartIndex: Swift.Bool {
    get
  }
  public mutating func clearStartIndex()
  public var sourceDevice: PolarBleSdk.PbSourceDevice {
    get
    set
  }
  public var hasSourceDevice: Swift.Bool {
    get
  }
  public mutating func clearSourceDevice()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbStrengthTrainingResistance {
  public var resistanceType: PolarBleSdk.PbStrengthTrainingResistance.PbStrengthTrainingResistanceType {
    get
    set
  }
  public var hasResistanceType: Swift.Bool {
    get
  }
  public mutating func clearResistanceType()
  public var weight: Swift.Float {
    get
    set
  }
  public var hasWeight: Swift.Bool {
    get
  }
  public mutating func clearWeight()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbStrengthTrainingResistanceType : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case bodyWeight
    case weight
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbStrengthTrainingResistance.PbStrengthTrainingResistanceType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbStrengthTrainingResistance.PbStrengthTrainingResistanceType]
  public static var allCases: [PolarBleSdk.PbStrengthTrainingResistance.PbStrengthTrainingResistanceType] {
    get
  }
}
extension PolarBleSdk.PbVolumeTarget : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbVolumeTarget, rhs: PolarBleSdk.PbVolumeTarget) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbVolumeTarget.PbVolymeTargetType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbStravaSegmentTargets : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbStravaSegmentTargets, rhs: PolarBleSdk.PbStravaSegmentTargets) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStravaSegmentTarget : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbStravaSegmentTarget, rhs: PolarBleSdk.PbStravaSegmentTarget) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStravaSegmentTarget.PbStravaSegmentType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbFuelingReminder : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbFuelingReminder, rhs: PolarBleSdk.PbFuelingReminder) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbFuelingReminder.PbFuelingReminderType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbTrainingLoad : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbTrainingLoad, rhs: PolarBleSdk.PbTrainingLoad) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbHeartRateZone : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbHeartRateZone, rhs: PolarBleSdk.PbHeartRateZone) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSpeedZone : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSpeedZone, rhs: PolarBleSdk.PbSpeedZone) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbPowerZone : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbPowerZone, rhs: PolarBleSdk.PbPowerZone) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbZones : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbZones, rhs: PolarBleSdk.PbZones) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbBleMac : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbBleMac, rhs: PolarBleSdk.PbBleMac) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbBleDeviceName : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbBleDeviceName, rhs: PolarBleSdk.PbBleDeviceName) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDeviceId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbDeviceId, rhs: PolarBleSdk.PbDeviceId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbRunningIndex : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbRunningIndex, rhs: PolarBleSdk.PbRunningIndex) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSportIdentifier : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSportIdentifier, rhs: PolarBleSdk.PbSportIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbOneLineText : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbOneLineText, rhs: PolarBleSdk.PbOneLineText) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbMultiLineText : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbMultiLineText, rhs: PolarBleSdk.PbMultiLineText) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbLanguageId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbLanguageId, rhs: PolarBleSdk.PbLanguageId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTrainingSessionTargetId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbTrainingSessionTargetId, rhs: PolarBleSdk.PbTrainingSessionTargetId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTrainingSessionFavoriteId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbTrainingSessionFavoriteId, rhs: PolarBleSdk.PbTrainingSessionFavoriteId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbRouteId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbRouteId, rhs: PolarBleSdk.PbRouteId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSwimmingPoolInfo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSwimmingPoolInfo, rhs: PolarBleSdk.PbSwimmingPoolInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTrainingProgramId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbTrainingProgramId, rhs: PolarBleSdk.PbTrainingProgramId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbEventId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbEventId, rhs: PolarBleSdk.PbEventId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbOnDemandTrainingTargetTypeId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbOnDemandTrainingTargetTypeId, rhs: PolarBleSdk.PbOnDemandTrainingTargetTypeId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbPauseTime : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbPauseTime, rhs: PolarBleSdk.PbPauseTime) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbApplicationId : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbApplicationId, rhs: PolarBleSdk.PbApplicationId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbVersion : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbVersion, rhs: PolarBleSdk.PbVersion) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbAlgorithmVersion : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbAlgorithmVersion, rhs: PolarBleSdk.PbAlgorithmVersion) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSubcomponentInfo : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSubcomponentInfo, rhs: PolarBleSdk.PbSubcomponentInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbBleUuid : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbBleUuid, rhs: PolarBleSdk.PbBleUuid) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbBleCharacteristic : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbBleCharacteristic, rhs: PolarBleSdk.PbBleCharacteristic) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbBleService : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbBleService, rhs: PolarBleSdk.PbBleService) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSourceDevice : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSourceDevice, rhs: PolarBleSdk.PbSourceDevice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSampleSourceDevice : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSampleSourceDevice, rhs: PolarBleSdk.PbSampleSourceDevice) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStrengthTrainingResistance : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbStrengthTrainingResistance, rhs: PolarBleSdk.PbStrengthTrainingResistance) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStrengthTrainingResistance.PbStrengthTrainingResistanceType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
public enum PolarErrors : Swift.Error {
  case notificationNotEnabled
  case serviceNotFound
  case deviceNotConnected
  case deviceNotFound
  case operationNotSupported
  case messageEncodeFailed
  case messageDecodeFailed
  case dateTimeFormatFailed(description: Swift.String = "")
  case unableToStartStreaming
  case invalidArgument(description: Swift.String = "")
  case polarBleSdkInternalException(description: Swift.String)
  case deviceError(description: Swift.String)
  case polarOfflineRecordingError(description: Swift.String)
}
@_hasMissingDesignatedInitializers public class AtomicBoolean {
  public func get() -> Swift.Bool
  public func set(_ value: Swift.Bool)
  @objc deinit
}
public protocol PolarSdkModeApi {
  func enableSDKMode(_ identifier: Swift.String) -> RxSwift.Completable
  func disableSDKMode(_ identifier: Swift.String) -> RxSwift.Completable
  func isSDKModeEnabled(_ identifier: Swift.String) -> RxSwift.Single<Swift.Bool>
}
public enum AtomicIntegerException : Swift.Error {
  case waitTimeout
  case canceledSignal
  public static func == (a: PolarBleSdk.AtomicIntegerException, b: PolarBleSdk.AtomicIntegerException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PolarOfflineRecordingTriggerMode {
  case triggerDisabled
  case triggerSystemStart
  case triggerExerciseStart
  public static func == (a: PolarBleSdk.PolarOfflineRecordingTriggerMode, b: PolarBleSdk.PolarOfflineRecordingTriggerMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PolarOfflineRecordingTrigger {
  public let triggerMode: PolarBleSdk.PolarOfflineRecordingTriggerMode
  public let triggerFeatures: [PolarBleSdk.PolarDeviceDataType : PolarBleSdk.PolarSensorSetting?]
  public init(triggerMode: PolarBleSdk.PolarOfflineRecordingTriggerMode, triggerFeatures: [PolarBleSdk.PolarDeviceDataType : PolarBleSdk.PolarSensorSetting?])
}
public enum Protocol_PbPFtpQuery : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case identifyDevice
  case setSystemTime
  case getSystemTime
  case setLocalTime
  case getLocalTime
  case getDiskSpace
  case generateChallengeToken
  case setInternalTest
  case getBatteryStatus
  case setAdbMode
  case cleanupDiskSpace
  case getInactivityPreAlert
  case prepareFirmwareUpdate
  case requestSynchronization
  case requestStartRecording
  case requestStopRecording
  case requestRecordingStatus
  case generateAsymmetricKeys
  case getDisplayStatus
  case getVisualElements
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpQuery : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Protocol_PbPFtpQuery]
  public static var allCases: [PolarBleSdk.Protocol_PbPFtpQuery] {
    get
  }
}
public struct Protocol_PbPFtpOperation {
  public var command: PolarBleSdk.Protocol_PbPFtpOperation.Command {
    get
    set
  }
  public var hasCommand: Swift.Bool {
    get
  }
  public mutating func clearCommand()
  public var path: Swift.String {
    get
    set
  }
  public var hasPath: Swift.Bool {
    get
  }
  public mutating func clearPath()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum Command : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case get
    case put
    case merge
    case remove
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
public struct Protocol_PbPFtpSetSystemTimeParams {
  public var date: PolarBleSdk.PbDate {
    get
    set
  }
  public var hasDate: Swift.Bool {
    get
  }
  public mutating func clearDate()
  public var time: PolarBleSdk.PbTime {
    get
    set
  }
  public var hasTime: Swift.Bool {
    get
  }
  public mutating func clearTime()
  public var trusted: Swift.Bool {
    get
    set
  }
  public var hasTrusted: Swift.Bool {
    get
  }
  public mutating func clearTrusted()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpRequestStartRecordingParams {
  public var sampleType: PolarBleSdk.PbSampleType {
    get
    set
  }
  public var hasSampleType: Swift.Bool {
    get
  }
  public mutating func clearSampleType()
  public var recordingInterval: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasRecordingInterval: Swift.Bool {
    get
  }
  public mutating func clearRecordingInterval()
  public var sampleDataIdentifier: Swift.String {
    get
    set
  }
  public var hasSampleDataIdentifier: Swift.Bool {
    get
  }
  public mutating func clearSampleDataIdentifier()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpSetLocalTimeParams {
  public var date: PolarBleSdk.PbDate {
    get
    set
  }
  public var hasDate: Swift.Bool {
    get
  }
  public mutating func clearDate()
  public var time: PolarBleSdk.PbTime {
    get
    set
  }
  public var hasTime: Swift.Bool {
    get
  }
  public mutating func clearTime()
  public var tzOffset: Swift.Int32 {
    get
    set
  }
  public var hasTzOffset: Swift.Bool {
    get
  }
  public mutating func clearTzOffset()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpGenerateChallengeTokenParams {
  public var userID: Swift.UInt32 {
    get
    set
  }
  public var hasUserID: Swift.Bool {
    get
  }
  public mutating func clearUserID()
  public var nonse: Foundation.Data {
    get
    set
  }
  public var hasNonse: Swift.Bool {
    get
  }
  public mutating func clearNonse()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpSetAdbModeParams {
  public var enable: Swift.Bool {
    get
    set
  }
  public var hasEnable: Swift.Bool {
    get
  }
  public mutating func clearEnable()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Protocol_PbPFtpCleanupDiskSpaceParams {
  public var requiredBytes: Swift.UInt64 {
    get
    set
  }
  public var hasRequiredBytes: Swift.Bool {
    get
  }
  public mutating func clearRequiredBytes()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension PolarBleSdk.Protocol_PbPFtpQuery : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPFtpOperation : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpOperation, rhs: PolarBleSdk.Protocol_PbPFtpOperation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpOperation.Command : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Protocol_PbPFtpSetSystemTimeParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpSetSystemTimeParams, rhs: PolarBleSdk.Protocol_PbPFtpSetSystemTimeParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpRequestStartRecordingParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpRequestStartRecordingParams, rhs: PolarBleSdk.Protocol_PbPFtpRequestStartRecordingParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpSetLocalTimeParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpSetLocalTimeParams, rhs: PolarBleSdk.Protocol_PbPFtpSetLocalTimeParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpGenerateChallengeTokenParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpGenerateChallengeTokenParams, rhs: PolarBleSdk.Protocol_PbPFtpGenerateChallengeTokenParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpSetAdbModeParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpSetAdbModeParams, rhs: PolarBleSdk.Protocol_PbPFtpSetAdbModeParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Protocol_PbPFtpCleanupDiskSpaceParams : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Protocol_PbPFtpCleanupDiskSpaceParams, rhs: PolarBleSdk.Protocol_PbPFtpCleanupDiskSpaceParams) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum PbDataType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case undefined
  case inherited
  case `enum`
  case millis
  case second
  case minute
  case hour
  case hours
  case day
  case month
  case year
  case weight
  case height
  case vo2Max
  case heartrate
  case hrPercent
  case hrReserve
  case speed
  case cadence
  case altitude
  case power
  case powerLrb
  case powerPi
  case temperature
  case activity
  case strideLength
  case incline
  case decline
  case distance
  case energy
  case fatPercents
  case ascent
  case descent
  case latitude
  case longitude
  case hertz
  case percent
  case cumulatedActivityDay
  case runningIndex
  case rrInterval
  case zIndex
  case exerciseTargetIndex
  case timeZoneOffset
  case wheelSize
  case fitnessClass
  case acceleration
  case crankLength
  case angleDegree
  case newton
  case functionalThresholdPower
  case calories
  case speedCalibrationOffset
  case week
  case cardioLoad
  case maximumAerobicPower
  case maximumAerobicSpeed
  case muscleLoad
  case perceivedLoad
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDataType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbDataType]
  public static var allCases: [PolarBleSdk.PbDataType] {
    get
  }
}
public enum PbHeartRateView : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case heartRateViewBpm
  case heartRateViewPercentsOfHrReserve
  case heartRateViewPercentsOfMaxHr
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbHeartRateView : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbHeartRateView]
  public static var allCases: [PolarBleSdk.PbHeartRateView] {
    get
  }
}
public enum PbUnitSystem : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case metric
  case imperial
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbUnitSystem : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbUnitSystem]
  public static var allCases: [PolarBleSdk.PbUnitSystem] {
    get
  }
}
public enum PbTimeSelection : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case time1
  case time2
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTimeSelection : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbTimeSelection]
  public static var allCases: [PolarBleSdk.PbTimeSelection] {
    get
  }
}
public enum PbTimeFormat : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case timeFormat24H
  case timeFormat12H
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTimeFormat : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbTimeFormat]
  public static var allCases: [PolarBleSdk.PbTimeFormat] {
    get
  }
}
public enum PbTimeFormatSeparator : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case timeFormatSeparatorDot
  case timeFormatSeparatorColon
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTimeFormatSeparator : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbTimeFormatSeparator]
  public static var allCases: [PolarBleSdk.PbTimeFormatSeparator] {
    get
  }
}
public enum PbStartDayOfWeek : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case monday
  case saturday
  case sunday
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStartDayOfWeek : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbStartDayOfWeek]
  public static var allCases: [PolarBleSdk.PbStartDayOfWeek] {
    get
  }
}
public enum PbDateFormatSeparator : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case dot
  case slash
  case hyphen
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDateFormatSeparator : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbDateFormatSeparator]
  public static var allCases: [PolarBleSdk.PbDateFormatSeparator] {
    get
  }
}
public enum PbDateFormat : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ddMmYyyy
  case mmDdYyyy
  case yyyyMmDd
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDateFormat : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbDateFormat]
  public static var allCases: [PolarBleSdk.PbDateFormat] {
    get
  }
}
public enum PbFeatureType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case featureTypeHeartRate
  case featureTypeRrInterval
  case featureTypeSpeed
  case featureTypeDistance
  case featureTypeBikeCadence
  case featureTypeBikePower
  case featureTypeGpsLocation
  case featureTypeRunningCadence
  case featureTypePressTemperature
  case featureTypeAltitude
  case featureTypeSteps
  case featureTypeActivity
  case featureTypeStrideLength
  case featureTypeRscMovingType
  case featureTypeJumpHeigth
  case featureTypeCompassHeading
  case featureTypeGpsSpeed
  case featureTypeGpsDistance
  case featureTypeGpsAltitude
  case featureTypeBikeWheelRevolution
  case featureTypeBikeCrankRevolution
  case featureTypeAsSpeed
  case featureTypeAsCadence
  case featureTypeAsDistance
  case featureTypeAsSwrState
  case featureTypeBatteryLevel
  case featureTypeFileTransfer
  case featureTypePushNotifications
  case featureTypeWeightScale
  case featureTypeRemoteButtons
  case featureTypeGopro
  case featureTypePpInterval
  case featureTypeMediaControl
  case featureTypeMobileGps
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbFeatureType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbFeatureType]
  public static var allCases: [PolarBleSdk.PbFeatureType] {
    get
  }
}
public enum PbMovingType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case walking
  case running
  case standing
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbMovingType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbMovingType]
  public static var allCases: [PolarBleSdk.PbMovingType] {
    get
  }
}
public enum PbOperationType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case multiply
  case sum
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbOperationType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbOperationType]
  public static var allCases: [PolarBleSdk.PbOperationType] {
    get
  }
}
public enum PbExerciseFeedback : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case feedbackNone
  case feedback1
  case feedback2
  case feedback3
  case feedback4
  case feedback5
  case feedback6
  case feedback7
  case feedback8
  case feedback9
  case feedback10
  case feedback11
  case feedback12
  case feedback13
  case feedback14
  case feedback15
  case feedback16
  case feedback17
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbExerciseFeedback : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbExerciseFeedback]
  public static var allCases: [PolarBleSdk.PbExerciseFeedback] {
    get
  }
}
public enum PbHeartRateZoneSettingSource : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case heartRateZoneSettingSourceDefault
  case heartRateZoneSettingSourceThreshold
  case heartRateZoneSettingSourceFree
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbHeartRateZoneSettingSource : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbHeartRateZoneSettingSource]
  public static var allCases: [PolarBleSdk.PbHeartRateZoneSettingSource] {
    get
  }
}
public enum PbPowerZoneSettingSource : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case powerZoneSettingSourceDefault
  case powerZoneSettingSourceFree
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbPowerZoneSettingSource : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbPowerZoneSettingSource]
  public static var allCases: [PolarBleSdk.PbPowerZoneSettingSource] {
    get
  }
}
public enum PbSpeedZoneSettingSource : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case speedZoneSettingSourceDefault
  case speedZoneSettingSourceFree
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSpeedZoneSettingSource : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSpeedZoneSettingSource]
  public static var allCases: [PolarBleSdk.PbSpeedZoneSettingSource] {
    get
  }
}
public enum PbPowerZoneCalculationMethod : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case powerZoneCalculationMethodUnknown
  case powerZoneCalculationMethodFtpBased
  case powerZoneCalculationMethodMapBased
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbPowerZoneCalculationMethod : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbPowerZoneCalculationMethod]
  public static var allCases: [PolarBleSdk.PbPowerZoneCalculationMethod] {
    get
  }
}
public enum PbSpeedZoneCalculationMethod : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case speedZoneCalculationMethodUnknown
  case speedZoneCalculationMethodSportSpecificPredefined
  case speedZoneCalculationMethodMasBased
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSpeedZoneCalculationMethod : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSpeedZoneCalculationMethod]
  public static var allCases: [PolarBleSdk.PbSpeedZoneCalculationMethod] {
    get
  }
}
public enum PbMacType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case macTypePublic
  case macTypeStatic
  case macTypePrivateNonresolvable
  case macTypePrivateResolvable
  case macTypeBtClassic
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbMacType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbMacType]
  public static var allCases: [PolarBleSdk.PbMacType] {
    get
  }
}
public enum PbSwimmingStyle : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case other
  case turn
  case otherSwimming
  case freestyle
  case breaststroke
  case backstroke
  case butterfly
  case drill
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSwimmingStyle : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSwimmingStyle]
  public static var allCases: [PolarBleSdk.PbSwimmingStyle] {
    get
  }
}
public enum PbSwimmingPoolUnits : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case swimmingPoolMeters
  case swimmingPoolYards
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSwimmingPoolUnits : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSwimmingPoolUnits]
  public static var allCases: [PolarBleSdk.PbSwimmingPoolUnits] {
    get
  }
}
public enum PbExerciseTargetType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case exerciseTargetTypeFree
  case exerciseTargetTypeVolume
  case exerciseTargetTypePhased
  case exerciseTargetTypeRoute
  case exerciseTargetTypeSteadyRacePace
  case exerciseTargetTypeRouteRacePace
  case exerciseTargetTypeStravaSegment
  case exerciseTargetTypeStrengthTraining
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbExerciseTargetType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbExerciseTargetType]
  public static var allCases: [PolarBleSdk.PbExerciseTargetType] {
    get
  }
}
public enum Buttons : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case buttonPlus
  case buttonMinus
  case buttonOk
  case buttonLight
  case buttonBack
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Buttons : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.Buttons]
  public static var allCases: [PolarBleSdk.Buttons] {
    get
  }
}
public enum ButtonState : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case buttonPressed
  case buttonReleased
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.ButtonState : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.ButtonState]
  public static var allCases: [PolarBleSdk.ButtonState] {
    get
  }
}
public enum PbSampleType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case sampleTypeUndefined
  case sampleTypeHeartRate
  case sampleTypeCadence
  case sampleTypeAltitude
  case sampleTypeAltitudeCalibration
  case sampleTypeTemperature
  case sampleTypeSpeed
  case sampleTypeDistance
  case sampleTypeStrideLength
  case sampleTypeStrideCalibration
  case sampleTypeForwardAcceleration
  case sampleTypeMovingType
  case sampleTypeLeftPedalPower
  case sampleTypeRightPedalPower
  case sampleTypeLeftPedalPowerCalibration
  case sampleTypeRightPedalPowerCalibration
  case sampleTypeRrInterval
  case sampleTypeAccelerationMad
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSampleType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSampleType]
  public static var allCases: [PolarBleSdk.PbSampleType] {
    get
  }
}
public enum PbSampleSourceType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case sampleSourceTypeUndefined
  case sampleSourceTypeOffline
  case sampleSourceTypeHeartRate
  case sampleSourceTypeHeartRateBle
  case sampleSourceTypeHeartRate5Khz
  case sampleSourceTypeHeartRateOptical
  case sampleSourceTypeGps
  case sampleSourceTypeStride
  case sampleSourceTypeWristMetrics
  case sampleSourceTypeChestMetrics
  case sampleSourceTypeBikePedal
  case sampleSourceTypeBikeWheel
  case sampleSourceTypeBikeCrank
  case sampleSourceTypeCombinedChestMetricsAndGps
  case sampleSourceTypeUpperBackMetrics
  case sampleSourceTypeCombinedUpperBackMetricsAndGps
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSampleSourceType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSampleSourceType]
  public static var allCases: [PolarBleSdk.PbSampleSourceType] {
    get
  }
}
public enum PbAltitudeSetting : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case altitudeOff
  case altitudeOn
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbAltitudeSetting : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbAltitudeSetting]
  public static var allCases: [PolarBleSdk.PbAltitudeSetting] {
    get
  }
}
public enum PbGPSSetting : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case gpsOff
  case gpsOnNormal
  case gpsOnLong
  case gpsOn10Hz
  case gpsOnMedium
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbGPSSetting : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbGPSSetting]
  public static var allCases: [PolarBleSdk.PbGPSSetting] {
    get
  }
}
public enum PbHeartTouch : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case heartTouchOff
  case heartTouchActivateBacklight
  case heartTouchShowPreviousLap
  case heartTouchShowTimeOfDay
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbHeartTouch : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbHeartTouch]
  public static var allCases: [PolarBleSdk.PbHeartTouch] {
    get
  }
}
public enum PbTapButtonAction : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case tapButtonOff
  case tapButtonTakeLap
  case tapButtonChangeTrainingView
  case tapButtonActivateBacklight
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTapButtonAction : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbTapButtonAction]
  public static var allCases: [PolarBleSdk.PbTapButtonAction] {
    get
  }
}
public enum PbHandedness : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case wuInLeftHand
  case wuInRightHand
  case wuInNecklace
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbHandedness : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbHandedness]
  public static var allCases: [PolarBleSdk.PbHandedness] {
    get
  }
}
public enum PbDeviceLocation : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case deviceLocationUndefined
  case deviceLocationOther
  case deviceLocationWristLeft
  case deviceLocationWristRight
  case deviceLocationNecklace
  case deviceLocationChest
  case deviceLocationUpperBack
  case deviceLocationFootLeft
  case deviceLocationFootRight
  case deviceLocationLowerArmLeft
  case deviceLocationLowerArmRight
  case deviceLocationUpperArmLeft
  case deviceLocationUpperArmRight
  case deviceLocationBikeMount
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDeviceLocation : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbDeviceLocation]
  public static var allCases: [PolarBleSdk.PbDeviceLocation] {
    get
  }
}
public enum PbSessionRPE : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case rpeNone
  case rpeEasy
  case rpeLight
  case rpeFairlyBrisk
  case rpeBrisk
  case rpeModerate
  case rpeFairlyHard
  case rpeHard
  case rpeExhausting
  case rpeExtreme
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSessionRPE : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSessionRPE]
  public static var allCases: [PolarBleSdk.PbSessionRPE] {
    get
  }
}
public enum PbMuscleSoreness : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case msUndefined
  case msNone
  case msSome
  case msMuch
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbMuscleSoreness : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbMuscleSoreness]
  public static var allCases: [PolarBleSdk.PbMuscleSoreness] {
    get
  }
}
public enum PbOverallFatigue : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case ofUndefined
  case ofNormal
  case ofALittle
  case ofMuch
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbOverallFatigue : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbOverallFatigue]
  public static var allCases: [PolarBleSdk.PbOverallFatigue] {
    get
  }
}
public enum PbSleepUserRating : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case pbSleptUndefined
  case pbSleptPoorly
  case pbSleptSomewhatPoorly
  case pbSleptNeitherPoorlyNorWell
  case pbSleptSomewhatWell
  case pbSleptWell
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSleepUserRating : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbSleepUserRating]
  public static var allCases: [PolarBleSdk.PbSleepUserRating] {
    get
  }
}
public enum PbDailyBalanceFeedback : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case dbNotCalculated
  case dbSick
  case dbFatigueTryToReduceTrainingLoadInjured
  case dbFatigueTryToReduceTrainingLoad
  case dbLimitedTrainingResponseOtherInjured
  case dbLimitedTrainingResponseOther
  case dbRespondingWellCanContinueIfInjuryAllows
  case dbRespondingWellCanContinue
  case dbYouCouldDoMoreTrainingIfInjuryAllows
  case dbYouCouldDoMoreTraining
  case dbYouSeemToBeStrainedInjured
  case dbYouSeemToBeStrained
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDailyBalanceFeedback : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbDailyBalanceFeedback]
  public static var allCases: [PolarBleSdk.PbDailyBalanceFeedback] {
    get
  }
}
public enum PbReadinessForSpeedAndStrengthTraining : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case rsstNotCalculated
  case rsstA1RecoveredReadyForAllTraining
  case rsstA2RecoveredReadyForAllTrainingIfFeelingOkNightlyRechargeCompromised
  case rsstA3RecoveredReadyForAllTrainingIfFeelingOkPossiblyStressed
  case rsstA4RecoveredReadyForSpeedAndStrengthTraining
  case rsstB1RecoveredReadyForSpeedAndStrengthTrainingAndLightCardio
  case rsstB2RecoveredReadyForSpeedAndStrengthTrainingAndLightCardioPoorNightlyRecharge
  case rsstB3RecoveredReadyForSpeedAndStrengthTrainingAndLightCardioPoorCardioRecovery
  case rsstB4NotRecoveredNoLegTrainingOrIntensiveCardio
  case rsstB5NotRecoveredNoLegTrainingOrIntensiveCardioPoorNightlyRecharge
  case rsstC1NotRecoveredNoStrengthOrIntensiveCardio
  case rsstC2NotRecoveredNoStrengthOrIntensiveCardioPoorNightlyRecharge
  case rsstD1RecoveredButInjuryAndIllnessRiskCausedByCardioTraining
  case rsstD2NotRecoveredAndInjuryAndIllnessRiskCausedByCardioTraining
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbReadinessForSpeedAndStrengthTraining : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbReadinessForSpeedAndStrengthTraining]
  public static var allCases: [PolarBleSdk.PbReadinessForSpeedAndStrengthTraining] {
    get
  }
}
public enum PbStrengthTrainingRoundRepetitionType : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case normal
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStrengthTrainingRoundRepetitionType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbStrengthTrainingRoundRepetitionType]
  public static var allCases: [PolarBleSdk.PbStrengthTrainingRoundRepetitionType] {
    get
  }
}
public enum PbStrengthTrainingWorkoutPhase : SwiftProtobuf.Enum {
  public typealias RawValue = Swift.Int
  case work
  case warmUp
  case coolDown
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStrengthTrainingWorkoutPhase : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbStrengthTrainingWorkoutPhase]
  public static var allCases: [PolarBleSdk.PbStrengthTrainingWorkoutPhase] {
    get
  }
}
public struct PbRangeOptions {
  public var minValue: Swift.Int32 {
    get
    set
  }
  public var hasMinValue: Swift.Bool {
    get
  }
  public mutating func clearMinValue()
  public var maxValue: Swift.Int32 {
    get
    set
  }
  public var hasMaxValue: Swift.Bool {
    get
  }
  public mutating func clearMaxValue()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbDate {
  public var year: Swift.UInt32 {
    get
    set
  }
  public var hasYear: Swift.Bool {
    get
  }
  public mutating func clearYear()
  public var month: Swift.UInt32 {
    get
    set
  }
  public var hasMonth: Swift.Bool {
    get
  }
  public mutating func clearMonth()
  public var day: Swift.UInt32 {
    get
    set
  }
  public var hasDay: Swift.Bool {
    get
  }
  public mutating func clearDay()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbTime {
  public var hour: Swift.UInt32 {
    get
    set
  }
  public var hasHour: Swift.Bool {
    get
  }
  public mutating func clearHour()
  public var minute: Swift.UInt32 {
    get
    set
  }
  public var hasMinute: Swift.Bool {
    get
  }
  public mutating func clearMinute()
  public var seconds: Swift.UInt32 {
    get
    set
  }
  public var hasSeconds: Swift.Bool {
    get
  }
  public mutating func clearSeconds()
  public var millis: Swift.UInt32 {
    get
    set
  }
  public var hasMillis: Swift.Bool {
    get
  }
  public mutating func clearMillis()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSystemDateTime {
  public var date: PolarBleSdk.PbDate {
    get
    set
  }
  public var hasDate: Swift.Bool {
    get
  }
  public mutating func clearDate()
  public var time: PolarBleSdk.PbTime {
    get
    set
  }
  public var hasTime: Swift.Bool {
    get
  }
  public mutating func clearTime()
  public var trusted: Swift.Bool {
    get
    set
  }
  public var hasTrusted: Swift.Bool {
    get
  }
  public mutating func clearTrusted()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbLocalDateTime {
  public var date: PolarBleSdk.PbDate {
    get
    set
  }
  public var hasDate: Swift.Bool {
    get
  }
  public mutating func clearDate()
  public var time: PolarBleSdk.PbTime {
    get
    set
  }
  public var hasTime: Swift.Bool {
    get
  }
  public mutating func clearTime()
  public var obsoleteTrusted: Swift.Bool {
    get
    set
  }
  public var hasObsoleteTrusted: Swift.Bool {
    get
  }
  public mutating func clearObsoleteTrusted()
  public var timeZoneOffset: Swift.Int32 {
    get
    set
  }
  public var hasTimeZoneOffset: Swift.Bool {
    get
  }
  public mutating func clearTimeZoneOffset()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbLocalDateTimeRange {
  public var startTime: PolarBleSdk.PbLocalDateTime {
    get
    set
  }
  public var hasStartTime: Swift.Bool {
    get
  }
  public mutating func clearStartTime()
  public var endTime: PolarBleSdk.PbLocalDateTime {
    get
    set
  }
  public var hasEndTime: Swift.Bool {
    get
  }
  public mutating func clearEndTime()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbDuration {
  public var hours: Swift.UInt32 {
    get
    set
  }
  public var hasHours: Swift.Bool {
    get
  }
  public mutating func clearHours()
  public var minutes: Swift.UInt32 {
    get
    set
  }
  public var hasMinutes: Swift.Bool {
    get
  }
  public mutating func clearMinutes()
  public var seconds: Swift.UInt32 {
    get
    set
  }
  public var hasSeconds: Swift.Bool {
    get
  }
  public mutating func clearSeconds()
  public var millis: Swift.UInt32 {
    get
    set
  }
  public var hasMillis: Swift.Bool {
    get
  }
  public mutating func clearMillis()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbLocation {
  public var latitude: Swift.Double {
    get
    set
  }
  public var hasLatitude: Swift.Bool {
    get
  }
  public mutating func clearLatitude()
  public var longitude: Swift.Double {
    get
    set
  }
  public var hasLongitude: Swift.Bool {
    get
  }
  public mutating func clearLongitude()
  public var timestamp: PolarBleSdk.PbSystemDateTime {
    get
    set
  }
  public var hasTimestamp: Swift.Bool {
    get
  }
  public mutating func clearTimestamp()
  public var fix: PolarBleSdk.PbLocation.Fix {
    get
    set
  }
  public var hasFix: Swift.Bool {
    get
  }
  public mutating func clearFix()
  public var satellites: Swift.UInt32 {
    get
    set
  }
  public var hasSatellites: Swift.Bool {
    get
  }
  public mutating func clearSatellites()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum Fix : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case none
    case fix2D
    case fix3D
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbLocation.Fix : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbLocation.Fix]
  public static var allCases: [PolarBleSdk.PbLocation.Fix] {
    get
  }
}
public struct PbSensorOffline {
  public var startIndex: Swift.UInt32 {
    get
    set
  }
  public var hasStartIndex: Swift.Bool {
    get
  }
  public mutating func clearStartIndex()
  public var stopIndex: Swift.UInt32 {
    get
    set
  }
  public var hasStopIndex: Swift.Bool {
    get
  }
  public mutating func clearStopIndex()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbVolume {
  public var volume: Swift.UInt32 {
    get
    set
  }
  public var hasVolume: Swift.Bool {
    get
  }
  public mutating func clearVolume()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbStrideSensorCalibSettings {
  public var runningFactor: Swift.Float {
    get
    set
  }
  public var hasRunningFactor: Swift.Bool {
    get
  }
  public mutating func clearRunningFactor()
  public var calibType: PolarBleSdk.PbStrideSensorCalibSettings.PbStrideCalibType {
    get
    set
  }
  public var hasCalibType: Swift.Bool {
    get
  }
  public mutating func clearCalibType()
  public var runningFactorSource: PolarBleSdk.PbStrideSensorCalibSettings.PbRunningFactorSource {
    get
    set
  }
  public var hasRunningFactorSource: Swift.Bool {
    get
  }
  public mutating func clearRunningFactorSource()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbStrideCalibType : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case strideCalibManual
    case strideCalibAuto
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum PbRunningFactorSource : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case runningFactorSourceDefault
    case runningFactorSourceAutoCalibration
    case runningFactorSourceManualCalibration
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbStrideSensorCalibSettings.PbStrideCalibType : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbStrideSensorCalibSettings.PbStrideCalibType]
  public static var allCases: [PolarBleSdk.PbStrideSensorCalibSettings.PbStrideCalibType] {
    get
  }
}
extension PolarBleSdk.PbStrideSensorCalibSettings.PbRunningFactorSource : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbStrideSensorCalibSettings.PbRunningFactorSource]
  public static var allCases: [PolarBleSdk.PbStrideSensorCalibSettings.PbRunningFactorSource] {
    get
  }
}
public struct PbWeek {
  public var weekNumberIso8601: Swift.UInt32 {
    get
    set
  }
  public var hasWeekNumberIso8601: Swift.Bool {
    get
  }
  public mutating func clearWeekNumberIso8601()
  public var year: Swift.UInt32 {
    get
    set
  }
  public var hasYear: Swift.Bool {
    get
  }
  public mutating func clearYear()
  public var timeZoneOffset: Swift.Int32 {
    get
    set
  }
  public var hasTimeZoneOffset: Swift.Bool {
    get
  }
  public mutating func clearTimeZoneOffset()
  public var weekStartDay: PolarBleSdk.PbStartDayOfWeek {
    get
    set
  }
  public var hasWeekStartDay: Swift.Bool {
    get
  }
  public mutating func clearWeekStartDay()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSampleSource {
  public var sampleSourceType: PolarBleSdk.PbSampleSourceType {
    get
    set
  }
  public var hasSampleSourceType: Swift.Bool {
    get
  }
  public mutating func clearSampleSourceType()
  public var startIndex: Swift.UInt32 {
    get
    set
  }
  public var hasStartIndex: Swift.Bool {
    get
  }
  public mutating func clearStartIndex()
  public var stopIndex: Swift.UInt32 {
    get
    set
  }
  public var hasStopIndex: Swift.Bool {
    get
  }
  public mutating func clearStopIndex()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbSensorCalibrationOffset {
  public var sampleSourceType: PolarBleSdk.PbSampleSourceType {
    get
    set
  }
  public var hasSampleSourceType: Swift.Bool {
    get
  }
  public mutating func clearSampleSourceType()
  public var speedCalOffset: Swift.Float {
    get
    set
  }
  public var hasSpeedCalOffset: Swift.Bool {
    get
  }
  public mutating func clearSpeedCalOffset()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbCalibrationSettings {
  public var sampleType: PolarBleSdk.PbSampleType {
    get
    set
  }
  public var hasSampleType: Swift.Bool {
    get
  }
  public mutating func clearSampleType()
  public var calibrationEnabled: Swift.Bool {
    get
    set
  }
  public var hasCalibrationEnabled: Swift.Bool {
    get
  }
  public mutating func clearCalibrationEnabled()
  public var calibrationCalculationEnabled: Swift.Bool {
    get
    set
  }
  public var hasCalibrationCalculationEnabled: Swift.Bool {
    get
  }
  public mutating func clearCalibrationCalculationEnabled()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbAccelerationMetrics {
  public var sampleSourceType: PolarBleSdk.PbSampleSourceType {
    get
    set
  }
  public var hasSampleSourceType: Swift.Bool {
    get
  }
  public mutating func clearSampleSourceType()
  public var calibrationSettings: [PolarBleSdk.PbCalibrationSettings]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbAutoPause {
  public var trigger: PolarBleSdk.PbAutoPause.PbAutoPauseTrigger {
    get
    set
  }
  public var hasTrigger: Swift.Bool {
    get
  }
  public mutating func clearTrigger()
  public var speedThreshold: Swift.Float {
    get
    set
  }
  public var hasSpeedThreshold: Swift.Bool {
    get
  }
  public mutating func clearSpeedThreshold()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbAutoPauseTrigger : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case autoPauseOff
    case autoPauseTriggerSpeed
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbAutoPause.PbAutoPauseTrigger : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbAutoPause.PbAutoPauseTrigger]
  public static var allCases: [PolarBleSdk.PbAutoPause.PbAutoPauseTrigger] {
    get
  }
}
public struct PbAutoLapSettings {
  public var automaticLap: PolarBleSdk.PbAutoLapSettings.PbAutomaticLap {
    get
    set
  }
  public var hasAutomaticLap: Swift.Bool {
    get
  }
  public mutating func clearAutomaticLap()
  public var automaticLapDistance: Swift.Float {
    get
    set
  }
  public var hasAutomaticLapDistance: Swift.Bool {
    get
  }
  public mutating func clearAutomaticLapDistance()
  public var automaticLapDuration: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasAutomaticLapDuration: Swift.Bool {
    get
  }
  public mutating func clearAutomaticLapDuration()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public enum PbAutomaticLap : SwiftProtobuf.Enum {
    public typealias RawValue = Swift.Int
    case automaticLapOff
    case automaticLapDistance
    case automaticLapDuration
    case automaticLapLocation
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension PolarBleSdk.PbAutoLapSettings.PbAutomaticLap : Swift.CaseIterable {
  public typealias AllCases = [PolarBleSdk.PbAutoLapSettings.PbAutomaticLap]
  public static var allCases: [PolarBleSdk.PbAutoLapSettings.PbAutomaticLap] {
    get
  }
}
public struct PbCardioLoad {
  public var activityLoad: Swift.Float {
    get
    set
  }
  public var hasActivityLoad: Swift.Bool {
    get
  }
  public mutating func clearActivityLoad()
  public var exerciseLoad: Swift.Float {
    get
    set
  }
  public var hasExerciseLoad: Swift.Bool {
    get
  }
  public mutating func clearExerciseLoad()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct PbPerceivedLoad {
  public var sessionRpe: PolarBleSdk.PbSessionRPE {
    get
    set
  }
  public var hasSessionRpe: Swift.Bool {
    get
  }
  public mutating func clearSessionRpe()
  public var duration: Swift.UInt32 {
    get
    set
  }
  public var hasDuration: Swift.Bool {
    get
  }
  public mutating func clearDuration()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension SwiftProtobuf.Google_Protobuf_FieldOptions {
  public var type: PolarBleSdk.PbDataType {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var range: PolarBleSdk.PbRangeOptions {
    get
    set
  }
  public var hasRange: Swift.Bool {
    get
  }
  public mutating func clearRange()
}
extension SwiftProtobuf.Google_Protobuf_MessageOptions {
  public var isUnion: Swift.Bool {
    get
    set
  }
  public var hasIsUnion: Swift.Bool {
    get
  }
  public mutating func clearIsUnion()
}
public let Types_Extensions: SwiftProtobuf.SimpleExtensionMap
public let Extensions_type: SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalEnumExtensionField<PolarBleSdk.PbDataType>, SwiftProtobuf.Google_Protobuf_FieldOptions>
public let Extensions_is_union: SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalExtensionField<SwiftProtobuf.ProtobufBool>, SwiftProtobuf.Google_Protobuf_MessageOptions>
public let Extensions_range: SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<PolarBleSdk.PbRangeOptions>, SwiftProtobuf.Google_Protobuf_FieldOptions>
extension PolarBleSdk.PbDataType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbHeartRateView : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbUnitSystem : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbTimeSelection : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbTimeFormat : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbTimeFormatSeparator : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbStartDayOfWeek : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbDateFormatSeparator : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbDateFormat : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbFeatureType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbMovingType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbOperationType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbExerciseFeedback : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbHeartRateZoneSettingSource : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbPowerZoneSettingSource : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSpeedZoneSettingSource : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbPowerZoneCalculationMethod : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSpeedZoneCalculationMethod : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbMacType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSwimmingStyle : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSwimmingPoolUnits : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbExerciseTargetType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.Buttons : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.ButtonState : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSampleType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSampleSourceType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbAltitudeSetting : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbGPSSetting : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbHeartTouch : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbTapButtonAction : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbHandedness : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbDeviceLocation : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSessionRPE : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbMuscleSoreness : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbOverallFatigue : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSleepUserRating : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbDailyBalanceFeedback : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbReadinessForSpeedAndStrengthTraining : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbStrengthTrainingRoundRepetitionType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbStrengthTrainingWorkoutPhase : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbRangeOptions : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbRangeOptions, rhs: PolarBleSdk.PbRangeOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDate : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbDate, rhs: PolarBleSdk.PbDate) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbTime : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbTime, rhs: PolarBleSdk.PbTime) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSystemDateTime : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSystemDateTime, rhs: PolarBleSdk.PbSystemDateTime) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbLocalDateTime : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbLocalDateTime, rhs: PolarBleSdk.PbLocalDateTime) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbLocalDateTimeRange : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbLocalDateTimeRange, rhs: PolarBleSdk.PbLocalDateTimeRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbDuration : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbDuration, rhs: PolarBleSdk.PbDuration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbLocation : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbLocation, rhs: PolarBleSdk.PbLocation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbLocation.Fix : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbSensorOffline : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSensorOffline, rhs: PolarBleSdk.PbSensorOffline) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbVolume : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbVolume, rhs: PolarBleSdk.PbVolume) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStrideSensorCalibSettings : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbStrideSensorCalibSettings, rhs: PolarBleSdk.PbStrideSensorCalibSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbStrideSensorCalibSettings.PbStrideCalibType : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbStrideSensorCalibSettings.PbRunningFactorSource : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbWeek : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbWeek, rhs: PolarBleSdk.PbWeek) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSampleSource : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSampleSource, rhs: PolarBleSdk.PbSampleSource) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbSensorCalibrationOffset : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbSensorCalibrationOffset, rhs: PolarBleSdk.PbSensorCalibrationOffset) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbCalibrationSettings : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbCalibrationSettings, rhs: PolarBleSdk.PbCalibrationSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbAccelerationMetrics : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbAccelerationMetrics, rhs: PolarBleSdk.PbAccelerationMetrics) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbAutoPause : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbAutoPause, rhs: PolarBleSdk.PbAutoPause) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbAutoPause.PbAutoPauseTrigger : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbAutoLapSettings : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbAutoLapSettings, rhs: PolarBleSdk.PbAutoLapSettings) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbAutoLapSettings.PbAutomaticLap : SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
}
extension PolarBleSdk.PbCardioLoad : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbCardioLoad, rhs: PolarBleSdk.PbCardioLoad) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.PbPerceivedLoad : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.PbPerceivedLoad, rhs: PolarBleSdk.PbPerceivedLoad) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PolarFirmwareUpdateApi {
  func updateFirmware(_ identifier: Swift.String) -> RxSwift.Observable<PolarBleSdk.FirmwareUpdateStatus>
}
public enum AtomicListException : Swift.Error {
  case waitTimeout
  case emptyQueueSignal
  case canceledSignal
  public static func == (a: PolarBleSdk.AtomicListException, b: PolarBleSdk.AtomicListException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers open class TimeUtility {
  public static func currentTime() -> Foundation.TimeInterval
  public static func timeDeltaSeconds(_ from: Foundation.TimeInterval) -> Foundation.TimeInterval
  public static func timeDeltaSeconds(_ from: Foundation.Date) -> Foundation.TimeInterval
  @objc deinit
}
public struct Data_PbRROffline {
  public var startTime: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasStartTime: Swift.Bool {
    get
  }
  public mutating func clearStartTime()
  public var timeInterval: PolarBleSdk.PbDuration {
    get
    set
  }
  public var hasTimeInterval: Swift.Bool {
    get
  }
  public mutating func clearTimeInterval()
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
public struct Data_PbExerciseRRIntervals {
  public var rrIntervals: [Swift.UInt32]
  public var rrSensorOffline: [PolarBleSdk.Data_PbRROffline]
  public var unknownFields: SwiftProtobuf.UnknownStorage
  public init()
}
extension PolarBleSdk.Data_PbRROffline : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Data_PbRROffline, rhs: PolarBleSdk.Data_PbRROffline) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.Data_PbExerciseRRIntervals : SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : SwiftProtobuf.Decoder
  public func traverse<V>(visitor: inout V) throws where V : SwiftProtobuf.Visitor
  public static func == (lhs: PolarBleSdk.Data_PbExerciseRRIntervals, rhs: PolarBleSdk.Data_PbExerciseRRIntervals) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension PolarBleSdk.BlePsFtpUtility.MessageType : Swift.Equatable {}
extension PolarBleSdk.BlePsFtpUtility.MessageType : Swift.Hashable {}
extension PolarBleSdk.BlePsFtpUtility.RFC76FrameProcessError : Swift.Equatable {}
extension PolarBleSdk.BlePsFtpUtility.RFC76FrameProcessError : Swift.Hashable {}
extension PolarBleSdk.PolarDeviceDataType : Swift.Equatable {}
extension PolarBleSdk.PolarDeviceDataType : Swift.Hashable {}
extension PolarBleSdk.PolarBleSdkFeature : Swift.Equatable {}
extension PolarBleSdk.PolarBleSdkFeature : Swift.Hashable {}
@available(*, deprecated, renamed: "PpgDataType")
extension PolarBleSdk.OhrDataType : Swift.Equatable {}
@available(*, deprecated, renamed: "PpgDataType")
extension PolarBleSdk.OhrDataType : Swift.Hashable {}
@available(*, deprecated, renamed: "PpgDataType")
extension PolarBleSdk.OhrDataType : Swift.RawRepresentable {}
extension PolarBleSdk.PpgDataType : Swift.Equatable {}
extension PolarBleSdk.PpgDataType : Swift.Hashable {}
extension PolarBleSdk.PpgDataType : Swift.RawRepresentable {}
extension PolarBleSdk.BleDeviceSession.DeviceSessionState : Swift.Equatable {}
extension PolarBleSdk.BleDeviceSession.DeviceSessionState : Swift.Hashable {}
extension PolarBleSdk.BleDeviceSession.ConnectionType : Swift.Equatable {}
extension PolarBleSdk.BleDeviceSession.ConnectionType : Swift.Hashable {}
extension PolarBleSdk.BlePolarDeviceCapabilitiesUtility.FileSystemType : Swift.Equatable {}
extension PolarBleSdk.BlePolarDeviceCapabilitiesUtility.FileSystemType : Swift.Hashable {}
extension PolarBleSdk.PmdOfflineRecTriggerMode : Swift.Equatable {}
extension PolarBleSdk.PmdOfflineRecTriggerMode : Swift.Hashable {}
extension PolarBleSdk.PmdOfflineRecTriggerMode : Swift.RawRepresentable {}
extension PolarBleSdk.PmdOfflineRecTriggerStatus : Swift.Equatable {}
extension PolarBleSdk.PmdOfflineRecTriggerStatus : Swift.Hashable {}
extension PolarBleSdk.PmdOfflineRecTriggerStatus : Swift.RawRepresentable {}
extension PolarBleSdk.RecordingInterval : Swift.Equatable {}
extension PolarBleSdk.RecordingInterval : Swift.Hashable {}
extension PolarBleSdk.RecordingInterval : Swift.RawRepresentable {}
extension PolarBleSdk.SampleType : Swift.Equatable {}
extension PolarBleSdk.SampleType : Swift.Hashable {}
extension PolarBleSdk.SampleType : Swift.RawRepresentable {}
extension PolarBleSdk.PmdSetting.PmdSettingType : Swift.Equatable {}
extension PolarBleSdk.PmdSetting.PmdSettingType : Swift.Hashable {}
extension PolarBleSdk.PmdSetting.PmdSettingType : Swift.RawRepresentable {}
extension PolarBleSdk.PmdResponseCode : Swift.Equatable {}
extension PolarBleSdk.PmdResponseCode : Swift.Hashable {}
extension PolarBleSdk.PmdResponseCode : Swift.RawRepresentable {}
extension PolarBleSdk.PmdMeasurementType : Swift.Equatable {}
extension PolarBleSdk.PmdMeasurementType : Swift.Hashable {}
extension PolarBleSdk.PmdMeasurementType : Swift.RawRepresentable {}
extension PolarBleSdk.PmdActiveMeasurement : Swift.Equatable {}
extension PolarBleSdk.PmdActiveMeasurement : Swift.Hashable {}
extension PolarBleSdk.PmdActiveMeasurement : Swift.RawRepresentable {}
extension PolarBleSdk.BlePsdClient.PsdMessage : Swift.Equatable {}
extension PolarBleSdk.BlePsdClient.PsdMessage : Swift.Hashable {}
extension PolarBleSdk.BlePsdClient.PsdMessage : Swift.RawRepresentable {}
extension PolarBleSdk.PolarSensorSetting.SettingType : Swift.Equatable {}
extension PolarBleSdk.PolarSensorSetting.SettingType : Swift.Hashable {}
extension PolarBleSdk.PolarSensorSetting.SettingType : Swift.RawRepresentable {}
extension PolarBleSdk.PmdSdkMode : Swift.Equatable {}
extension PolarBleSdk.PmdSdkMode : Swift.Hashable {}
extension PolarBleSdk.PmdSdkMode : Swift.RawRepresentable {}
extension PolarBleSdk.PmdRecordingType : Swift.Equatable {}
extension PolarBleSdk.PmdRecordingType : Swift.Hashable {}
extension PolarBleSdk.PmdRecordingType : Swift.RawRepresentable {}
extension PolarBleSdk.BleState : Swift.Equatable {}
extension PolarBleSdk.BleState : Swift.Hashable {}
extension PolarBleSdk.BleState : Swift.RawRepresentable {}
extension PolarBleSdk.AtomicIntegerException : Swift.Equatable {}
extension PolarBleSdk.AtomicIntegerException : Swift.Hashable {}
extension PolarBleSdk.PolarOfflineRecordingTriggerMode : Swift.Equatable {}
extension PolarBleSdk.PolarOfflineRecordingTriggerMode : Swift.Hashable {}
extension PolarBleSdk.AtomicListException : Swift.Equatable {}
extension PolarBleSdk.AtomicListException : Swift.Hashable {}
