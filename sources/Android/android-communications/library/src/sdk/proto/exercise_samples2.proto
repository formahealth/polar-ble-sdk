// SAMPLES2.BPB=PbExerciseSamples2
syntax = "proto2";

package data;

import "types.proto";
import "structures.proto";
import "exercise_rr_samples.proto";

option java_package = "fi.polar.remote.representation.protobuf";
option java_outer_classname = "ExerciseSamples2";

/*
    Exercise samples sync point.

    Sync points can be inserted in the data multiple times to synchronize the sample stream
    and reconfigure the granularity and other parameters of the delta stream.

    The usage of Sync Points gives possibility and flexibility to reconfigure the stream during
    the packing if the conditions change.
*/
message PbExerciseSamplesSyncPoint {

    // Sync point index.
    // Determines the sample index starting from which
    // this sync info is valid.
    // For example index = 0 is the starting sync point.
    // index [n] refers to [n]:th index in the delta data
    required uint32 index = 1;

    // If exists, this sync point also synchronizes heart rate.
    // Granularity 1 bps.
    optional uint32 heart_rate_sample = 2 [(type)=HEARTRATE];

    // If exists, this sync point also synchronizes cadence.
    // Granularity 1 rounds per minute
    optional uint32 cadence_sample = 3 [(type)=CADENCE];

    // If exists, this sync point also synchronizes speed
    optional float speed_sample = 4 [(type)=SPEED];

    // If exists, this sync point also synchronizes distance
    optional float distance_sample = 5 [(type)=DISTANCE];

    // If exists, this sync point also synchronizes forward acceleration
    optional float forward_acceleration_sample = 6 [(type)=ACCELERATION];

    // If exists, this sync point also synchronizes acceleration based
    // Mean Amplitude Deviation (MAD)
    optional float acceleration_mad_sample = 10;

    // Granularity of speed deltas starting from
    // this Sync Point. Default [0.001 km/h].
    optional uint32 speed_sample_granularity = 7 [default=1000];

    // Granularity of distance deltas starting from
    // this Sync Point. Default [0.1 m].
    optional uint32 distance_sample_granularity = 8 [default=10];

    // Granularity of forward acceleration deltas starting from
    // this Sync Point. Default [0.01 m/s^2].
    optional uint32 forward_acceleration_sample_granularity = 9 [default=100];

    // Granularity of acceleration MAD deltas starting from
    // this Sync Point. Default [0.01 mg].
    optional uint32 acceleration_mad_sample_granularity = 11 [default=100];
}

/*
    Exercise samples with sample type specific recording intervals

    Certain samples are encoded in delta-format, that is, by using reference points ("Sync points")
    and number of incremental changes to those points.

    Real data at point x can be calculated by:
    -----------------------------------------------------------------------------
    speed[x]                = sync_point->speed_sample +
                              SUM n=0..x (speed_samples(n) / sync_point->speed_sample_granularity)
    distance[x]             = sync_point->distance_sample +
                              SUM n=0..x (distance_samples(n) / sync_point->distance_sample_granularity)
    forward_acceleration[x] = sync_point->forward_acceleration_sample +
                              SUM n=0..x (forward_acceleration_samples(n) / sync_point->forward_acceleration_sample_granularity)
    heart_rate[x]           = sync_point->heart_rate_sample + SUM n=0..x (heart_rate_samples(n))
    cadence[x]              = sync_point->cadence_sample + SUM n=0..x (cadence_samples(n))
    acceleration_mad[x]     = sync_point->acceleration_mad_sample +
                              SUM n=0..x (acceleration_mad_samples(n) / sync_point->acceleration_mad_sample_granularity)

    To get data for any arbitrary point you need to iterate with given formula over all
    previous synchronization points.

    For the sample indexes which have also sync points, the result values are calculated
    using the NEW sync point.
*/

message PbExerciseIntervalledSample2List {
    // Sample Type, SPEED, DISTANCE etc.
    required PbSampleType sample_type = 1;

    // Recording interval of samples in milliseconds
    required uint32 recording_interval_ms = 2;

    // Points to which incrementally the deltas are accumulated
    repeated PbExerciseSamplesSyncPoint sync_point = 3;

    // Indicates the source of certain sample: source and start / stop indexes for the given source
    repeated PbSampleSource sample_source = 4;

    //
    // Delta data
    //

    // Delta coded heart rate samples
    repeated sint32 heart_rate_samples = 5 [packed = true];

    // Delta coded cadence samples
    repeated sint32 cadence_samples = 6 [packed = true];

    // Delta coded speed samples
    // Note: Samples are already calibrated samples
    repeated sint32 speed_samples = 7 [packed = true];

    // Delta coded distance samples: total distance from the beginning of the exercise
    // Note: Samples are already calibrated samples
    repeated uint32 distance_samples = 8 [packed = true];

    // User 1d delta coded acceleration samples as m/s2
    repeated sint32 forward_acceleration_samples = 9 [packed = true];

    // Delta coded acceleration based Mean Amplitude Deviation (MAD) samples as mg
    repeated sint32 acceleration_mad_samples = 11 [packed = true];

    //
    // Non-delta data, inserted for every sample index
    //

    // User walking/running/standing status samples
    repeated PbMovingType moving_type_samples = 10;
};

/*
  Sample data of the exercise.
  ! All fields are required.
*/
message PbExerciseSamples2 {
    // Exercise samples with sample type specific recording intervals
    repeated PbExerciseIntervalledSample2List exercise_intervalled_sample2_list = 1;
};

